// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`example: python kurt python 1`] = `
[
  "COMMENT "# Copyright (C) 2012 Tim Radvan"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "#"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# This file is part of Kurt."",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "#"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# Kurt is free software: you can redistribute it and/or modify it under the"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# terms of the GNU Lesser General Public License as published by the Free"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# Software Foundation, either version 3 of the License, or (at your option) any"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# later version."",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "#"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# Kurt is distributed in the hope that it will be useful, but WITHOUT ANY"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# details."",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "#"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# You should have received a copy of the GNU Lesser General Public License"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# along with Kurt. If not, see <http://www.gnu.org/licenses/>."",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "\\r\\nA Python module for reading and writing Scratch project files.\\r\\n\\r\\nScratch is created by the Lifelong Kindergarten Group at the MIT Media Lab.\\r\\nSee their website: http://scratch.mit.edu/\\r\\n\\r\\n\\r\\nClasses\\r\\n-------\\r\\n\\r\\nThe main interface:\\r\\n\\r\\n* :class:\`Project\`\\r\\n\\r\\nThe following :class:\`Actors <Actor>\` may be found on the project stage:\\r\\n\\r\\n* :class:\`Stage\`\\r\\n* :class:\`Sprite\`\\r\\n* :class:\`Watcher\`\\r\\n\\r\\nThe two :class:\`Scriptables <Scriptable>\` (:class:\`Stage\` and :class:\`Sprite\`)\\r\\nhave instances of the following contained in their attributes:\\r\\n\\r\\n* :class:\`Variable\`\\r\\n* :class:\`List\`\\r\\n\\r\\nScripts use the following classes:\\r\\n\\r\\n* :class:\`Block\`\\r\\n* :class:\`Script\`\\r\\n* :class:\`Comment\`\\r\\n* :class:\`BlockType\`\\r\\n\\r\\nMedia files use the following classes:\\r\\n\\r\\n* :class:\`Costume\`\\r\\n* :class:\`Image\`\\r\\n* :class:\`Sound\`\\r\\n* :class:\`Waveform\`\\r\\n\\r\\nFile Formats\\r\\n------------\\r\\n\\r\\nSupported file formats:\\r\\n\\r\\n    =============== =========== =========\\r\\n    Format Name     Description Extension\\r\\n    =============== =========== =========\\r\\n    \`\`\\"scratch14\\"\`\` Scratch 1.4 \`\`.sb\`\`\\r\\n    \`\`\\"scratch20\\"\`\` Scratch 2.0 \`\`.sb2\`\`\\r\\n    =============== =========== =========\\r\\n\\r\\nPass \\"Format name\\" as the argument to :attr:\`Project.convert\`.\\r\\n\\r\\nKurt provides a superset of the information in each individual format, but will\\r\\nonly convert features between a subset of formats.\\r\\n\\r\\n----\\r\\n\\r\\n"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "__version__"",
  "OP "="",
  "STRING "2.0.7"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "from"",
  "NAME "collections"",
  "NAME "import"",
  "NAME "OrderedDict"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "import"",
  "NAME "re"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "import"",
  "NAME "os"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "import"",
  "NAME "random"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "try"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "NAME "from"",
  "NAME "cStringIO"",
  "NAME "import"",
  "NAME "StringIO"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "except"",
  "NAME "ImportError"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "NAME "from"",
  "NAME "StringIO"",
  "NAME "import"",
  "NAME "StringIO"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "import"",
  "NAME "PIL"",
  "OP "."",
  "NAME "Image"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "import"",
  "NAME "wave"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "#-- Utils --#"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "_clean_filename"",
  "OP "("",
  "NAME "name"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "Strip non-alphanumeric characters to makes name safe to be used as\\r\\n    filename."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "re"",
  "OP "."",
  "NAME "sub"",
  "OP "("",
  "STRING "[^\\\\\\\\w .]"",
  "OP ","",
  "STRING """,
  "OP ","",
  "NAME "name"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "#-- Project: main class --#"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "class"",
  "NAME "Project"",
  "OP "("",
  "NAME "object"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "The main kurt class. Stores the contents of a project file.\\r\\n\\r\\n    Contents include global variables and lists, the :attr:\`stage\` and\\r\\n    :attr:\`sprites\`, each with their own :attr:\`scripts\`, :attr:\`costumes\`,\\r\\n    :attr:\`sounds\`, :attr:\`variables\` and :attr:\`lists\`.\\r\\n\\r\\n    A Project can be loaded from or saved to disk in a format which can be read\\r\\n    by a Scratch program or one of its derivatives.\\r\\n\\r\\n    Loading a project::\\r\\n\\r\\n        p = kurt.Project.load(\\"tests/game.sb\\")\\r\\n\\r\\n    Getting all the scripts::\\r\\n\\r\\n        for scriptable in p.sprites + [p.stage]:\\r\\n            for script in scriptable.scripts:\\r\\n                print script\\r\\n\\r\\n    Creating a new project::\\r\\n\\r\\n        p = kurt.Project()\\r\\n\\r\\n    Converting between formats::\\r\\n\\r\\n        p = kurt.Project.load(\\"tests/game.sb\\")\\r\\n        p.convert(\\"scratch20\\")\\r\\n        # []\\r\\n        p.save()\\r\\n        # 'tests/game.sb2'\\r\\n\\r\\n    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "self"",
  "OP "."",
  "NAME "name"",
  "OP "="",
  "NAME "u"",
  "STRING """,
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The name of the project.\\r\\n\\r\\n        May be displayed to the user. Doesn't have to match the filename in\\r\\n        :attr:\`path\`. May not be saved for some formats.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "path"",
  "OP "="",
  "NAME "None"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The path to the project file."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "_plugin"",
  "OP "="",
  "NAME "None"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The file format plugin used to load this project.\\r\\n\\r\\n        Get the current format using the :attr:\`format\` property. Use\\r\\n        :attr:\`convert()\` to change between formats.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "stage"",
  "OP "="",
  "NAME "Stage"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The :class:\`Stage\`."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "sprites"",
  "OP "="",
  "OP "["",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "List of :class:\`Sprites <Sprite>\`.\\r\\n\\r\\n        Use :attr:\`get_sprite\` to get a sprite by name.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "actors"",
  "OP "="",
  "OP "["",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "List of each :class:\`Actor\` on the stage.\\r\\n\\r\\n        Includes :class:\`Watchers <Watcher>\` as well as :class:\`Sprites\\r\\n        <Sprite>\`.\\r\\n\\r\\n        Sprites in :attr:\`sprites\` but not in actors will be added to actors on\\r\\n        save.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "variables"",
  "OP "="",
  "OP "{"",
  "OP "}"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING ":class:\`dict\` of global :class:\`Variables <Variable>\` by name."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "lists"",
  "OP "="",
  "OP "{"",
  "OP "}"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING ":class:\`dict\` of global :class:\`Lists <List>\` by name."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "thumbnail"",
  "OP "="",
  "NAME "None"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "An :class:\`Image\` with a screenshot of the project."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "tempo"",
  "OP "="",
  "NUMBER "60"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The tempo in BPM used for note blocks."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "notes"",
  "OP "="",
  "NAME "u"",
  "STRING "Made with Kurt\\\\nhttp://github.com/blob8108/kurt"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "Notes about the project, aka project comments.\\r\\n\\r\\n        Displayed on the website next to the project.\\r\\n\\r\\n        Line endings will be converted to \`\`\\\\\\\\n\`\`.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "author"",
  "OP "="",
  "NAME "u"",
  "STRING """,
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The username of the project's author, eg. \`\`'blob8108'\`\`."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__repr__"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "STRING "<%s.%s()>"",
  "OP "%"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__module__"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__name__"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "get_sprite"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "name"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Get a sprite from :attr:\`sprites\` by name.\\r\\n\\r\\n        Returns None if the sprite isn't found.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "for"",
  "NAME "sprite"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "sprites"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "if"",
  "NAME "sprite"",
  "OP "."",
  "NAME "name"",
  "OP "=="",
  "NAME "name"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "return"",
  "NAME "sprite"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "DEDENT """,
  "OP "@"",
  "NAME "property"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "format"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "The file format of the project.\\r\\n\\r\\n        :class:\`Project\` is mainly a universal representation, and so a project\\r\\n        has no specfic format. This is the format the project was loaded with.\\r\\n        To convert to a different format, use :attr:\`save()\`.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "_plugin"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "_plugin"",
  "OP "."",
  "NAME "name"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "OP "@"",
  "NAME "classmethod"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "load"",
  "OP "("",
  "NAME "cls"",
  "OP ","",
  "NAME "path"",
  "OP ","",
  "NAME "format"",
  "OP "="",
  "NAME "None"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Load project from file.\\r\\n\\r\\n        Use \`\`format\`\` to specify the file format to use.\\r\\n\\r\\n        Path can be a file-like object, in which case format is required.\\r\\n        Otherwise, can guess the appropriate format from the extension.\\r\\n\\r\\n        If you pass a file-like object, you're responsible for closing the\\r\\n        file.\\r\\n\\r\\n        :param path:   Path or file pointer.\\r\\n        :param format: :attr:\`KurtFileFormat.name\` eg. \`\`\\"scratch14\\"\`\`.\\r\\n                       Overrides the extension.\\r\\n\\r\\n        :raises: :class:\`UnknownFormat\` if the extension is unrecognised.\\r\\n        :raises: :py:class:\`ValueError\` if the format doesn't exist.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "path_was_string"",
  "OP "="",
  "NAME "isinstance"",
  "OP "("",
  "NAME "path"",
  "OP ","",
  "NAME "basestring"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "path_was_string"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "OP "("",
  "NAME "folder"",
  "OP ","",
  "NAME "filename"",
  "OP ")"",
  "OP "="",
  "NAME "os"",
  "OP "."",
  "NAME "path"",
  "OP "."",
  "NAME "split"",
  "OP "("",
  "NAME "path"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "OP "("",
  "NAME "name"",
  "OP ","",
  "NAME "extension"",
  "OP ")"",
  "OP "="",
  "NAME "os"",
  "OP "."",
  "NAME "path"",
  "OP "."",
  "NAME "splitext"",
  "OP "("",
  "NAME "filename"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "format"",
  "NAME "is"",
  "NAME "None"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "plugin"",
  "OP "="",
  "NAME "kurt"",
  "OP "."",
  "NAME "plugin"",
  "OP "."",
  "NAME "Kurt"",
  "OP "."",
  "NAME "get_plugin"",
  "OP "("",
  "NAME "extension"",
  "OP "="",
  "NAME "extension"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "not"",
  "NAME "plugin"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "raise"",
  "NAME "UnknownFormat"",
  "OP "("",
  "NAME "extension"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "fp"",
  "OP "="",
  "NAME "open"",
  "OP "("",
  "NAME "path"",
  "OP ","",
  "STRING "rb"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "fp"",
  "OP "="",
  "NAME "path"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "assert"",
  "NAME "format"",
  "OP ","",
  "STRING "Format is required"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "plugin"",
  "OP "="",
  "NAME "kurt"",
  "OP "."",
  "NAME "plugin"",
  "OP "."",
  "NAME "Kurt"",
  "OP "."",
  "NAME "get_plugin"",
  "OP "("",
  "NAME "format"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "if"",
  "NAME "not"",
  "NAME "plugin"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "raise"",
  "NAME "ValueError"",
  "OP ","",
  "STRING "Unknown format %r"",
  "OP "%"",
  "NAME "format"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "project"",
  "OP "="",
  "NAME "plugin"",
  "OP "."",
  "NAME "load"",
  "OP "("",
  "NAME "fp"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "path_was_string"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "fp"",
  "OP "."",
  "NAME "close"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "project"",
  "OP "."",
  "NAME "convert"",
  "OP "("",
  "NAME "plugin"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "path"",
  "OP ","",
  "NAME "basestring"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "project"",
  "OP "."",
  "NAME "path"",
  "OP "="",
  "NAME "path"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "not"",
  "NAME "project"",
  "OP "."",
  "NAME "name"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "project"",
  "OP "."",
  "NAME "name"",
  "OP "="",
  "NAME "name"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "return"",
  "NAME "project"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "copy"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Return a new Project instance, deep-copying all the attributes."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "p"",
  "OP "="",
  "NAME "Project"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "p"",
  "OP "."",
  "NAME "name"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "name"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "p"",
  "OP "."",
  "NAME "path"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "path"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "p"",
  "OP "."",
  "NAME "_plugin"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "_plugin"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "p"",
  "OP "."",
  "NAME "stage"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "stage"",
  "OP "."",
  "NAME "copy"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "p"",
  "OP "."",
  "NAME "stage"",
  "OP "."",
  "NAME "project"",
  "OP "="",
  "NAME "p"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "for"",
  "NAME "sprite"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "sprites"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "s"",
  "OP "="",
  "NAME "sprite"",
  "OP "."",
  "NAME "copy"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "s"",
  "OP "."",
  "NAME "project"",
  "OP "="",
  "NAME "p"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "p"",
  "OP "."",
  "NAME "sprites"",
  "OP "."",
  "NAME "append"",
  "OP "("",
  "NAME "s"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "for"",
  "NAME "actor"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "actors"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "actor"",
  "OP ","",
  "NAME "Sprite"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "p"",
  "OP "."",
  "NAME "actors"",
  "OP "."",
  "NAME "append"",
  "OP "("",
  "NAME "p"",
  "OP "."",
  "NAME "get_sprite"",
  "OP "("",
  "NAME "actor"",
  "OP "."",
  "NAME "name"",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "a"",
  "OP "="",
  "NAME "actor"",
  "OP "."",
  "NAME "copy"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "a"",
  "OP ","",
  "NAME "Watcher"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "a"",
  "OP "."",
  "NAME "target"",
  "OP ","",
  "NAME "Project"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                        "",
  "NAME "a"",
  "OP "."",
  "NAME "target"",
  "OP "="",
  "NAME "p"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "elif"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "a"",
  "OP "."",
  "NAME "target"",
  "OP ","",
  "NAME "Stage"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                        "",
  "NAME "a"",
  "OP "."",
  "NAME "target"",
  "OP "="",
  "NAME "p"",
  "OP "."",
  "NAME "stage"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                        "",
  "NAME "a"",
  "OP "."",
  "NAME "target"",
  "OP "="",
  "NAME "p"",
  "OP "."",
  "NAME "get_sprite"",
  "OP "("",
  "NAME "a"",
  "OP "."",
  "NAME "target"",
  "OP "."",
  "NAME "name"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "p"",
  "OP "."",
  "NAME "actors"",
  "OP "."",
  "NAME "append"",
  "OP "("",
  "NAME "a"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "p"",
  "OP "."",
  "NAME "variables"",
  "OP "="",
  "NAME "dict"",
  "OP "("",
  "OP "("",
  "NAME "n"",
  "OP ","",
  "NAME "v"",
  "OP "."",
  "NAME "copy"",
  "OP "("",
  "OP ")"",
  "OP ")"",
  "NAME "for"",
  "OP "("",
  "NAME "n"",
  "OP ","",
  "NAME "v"",
  "OP ")"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "variables"",
  "OP "."",
  "NAME "items"",
  "OP "("",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "p"",
  "OP "."",
  "NAME "lists"",
  "OP "="",
  "NAME "dict"",
  "OP "("",
  "OP "("",
  "NAME "n"",
  "OP ","",
  "NAME "l"",
  "OP "."",
  "NAME "copy"",
  "OP "("",
  "OP ")"",
  "OP ")"",
  "NAME "for"",
  "OP "("",
  "NAME "n"",
  "OP ","",
  "NAME "l"",
  "OP ")"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "lists"",
  "OP "."",
  "NAME "items"",
  "OP "("",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "p"",
  "OP "."",
  "NAME "thumbnail"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "thumbnail"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "p"",
  "OP "."",
  "NAME "tempo"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "tempo"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "p"",
  "OP "."",
  "NAME "notes"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "notes"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "p"",
  "OP "."",
  "NAME "author"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "author"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "p"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "convert"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "format"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Convert the project in-place to a different file format.\\r\\n\\r\\n        Returns a list of :class:\`UnsupportedFeature\` objects, which may give\\r\\n        warnings about the conversion.\\r\\n\\r\\n        :param format: :attr:\`KurtFileFormat.name\` eg. \`\`\\"scratch14\\"\`\`.\\r\\n\\r\\n        :raises: :class:\`ValueError\` if the format doesn't exist.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "_plugin"",
  "OP "="",
  "NAME "kurt"",
  "OP "."",
  "NAME "plugin"",
  "OP "."",
  "NAME "Kurt"",
  "OP "."",
  "NAME "get_plugin"",
  "OP "("",
  "NAME "format"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "list"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "_normalize"",
  "OP "("",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "save"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "path"",
  "OP "="",
  "NAME "None"",
  "OP ","",
  "NAME "debug"",
  "OP "="",
  "NAME "False"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Save project to file.\\r\\n\\r\\n        :param path: Path or file pointer.\\r\\n\\r\\n                     If you pass a file pointer, you're responsible for closing\\r\\n                     it.\\r\\n\\r\\n                     If path is not given, the :attr:\`path\` attribute is used,\\r\\n                     usually the original path given to :attr:\`load()\`.\\r\\n\\r\\n                     If \`path\` has the extension of an existing plugin, the\\r\\n                     project will be converted using :attr:\`convert\`.\\r\\n                     Otherwise, the extension will be replaced with the\\r\\n                     extension of the current plugin.\\r\\n\\r\\n                     (Note that log output for the conversion will be printed\\r\\n                     to stdout. If you want to deal with the output, call\\r\\n                     :attr:\`convert\` directly.)\\r\\n\\r\\n                     If the path ends in a folder instead of a file, the\\r\\n                     filename is based on the project's :attr:\`name\`.\\r\\n\\r\\n        :param debug: If true, return debugging information from the format\\r\\n                      plugin instead of the path.\\r\\n\\r\\n        :raises: :py:class:\`ValueError\` if there's no path or name.\\r\\n\\r\\n        :returns: path to the saved file.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "p"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "copy"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "plugin"",
  "OP "="",
  "NAME "p"",
  "OP "."",
  "NAME "_plugin"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# require path"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "p"",
  "OP "."",
  "NAME "path"",
  "OP "="",
  "NAME "path"",
  "NAME "or"",
  "NAME "self"",
  "OP "."",
  "NAME "path"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "not"",
  "NAME "p"",
  "OP "."",
  "NAME "path"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "raise"",
  "NAME "ValueError"",
  "OP ","",
  "STRING "path is required"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "p"",
  "OP "."",
  "NAME "path"",
  "OP ","",
  "NAME "basestring"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "COMMENT "# split path"",
  "NL "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "OP "("",
  "NAME "folder"",
  "OP ","",
  "NAME "filename"",
  "OP ")"",
  "OP "="",
  "NAME "os"",
  "OP "."",
  "NAME "path"",
  "OP "."",
  "NAME "split"",
  "OP "("",
  "NAME "p"",
  "OP "."",
  "NAME "path"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "OP "("",
  "NAME "name"",
  "OP ","",
  "NAME "extension"",
  "OP ")"",
  "OP "="",
  "NAME "os"",
  "OP "."",
  "NAME "path"",
  "OP "."",
  "NAME "splitext"",
  "OP "("",
  "NAME "filename"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# get plugin from extension"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "path"",
  "OP ":"",
  "COMMENT "# only if not using self.path"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "try"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "plugin"",
  "OP "="",
  "NAME "kurt"",
  "OP "."",
  "NAME "plugin"",
  "OP "."",
  "NAME "Kurt"",
  "OP "."",
  "NAME "get_plugin"",
  "OP "("",
  "NAME "extension"",
  "OP "="",
  "NAME "extension"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "except"",
  "NAME "ValueError"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "pass"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# build output path"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "if"",
  "NAME "not"",
  "NAME "name"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "name"",
  "OP "="",
  "NAME "_clean_filename"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "name"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "not"",
  "NAME "name"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "raise"",
  "NAME "ValueError"",
  "OP ","",
  "STRING "name is required"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "filename"",
  "OP "="",
  "NAME "name"",
  "OP "+"",
  "NAME "plugin"",
  "OP "."",
  "NAME "extension"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "p"",
  "OP "."",
  "NAME "path"",
  "OP "="",
  "NAME "os"",
  "OP "."",
  "NAME "path"",
  "OP "."",
  "NAME "join"",
  "OP "("",
  "NAME "folder"",
  "OP ","",
  "NAME "filename"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# open"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "fp"",
  "OP "="",
  "NAME "open"",
  "OP "("",
  "NAME "p"",
  "OP "."",
  "NAME "path"",
  "OP ","",
  "STRING "wb"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "fp"",
  "OP "="",
  "NAME "p"",
  "OP "."",
  "NAME "path"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "path"",
  "OP "="",
  "NAME "None"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "if"",
  "NAME "not"",
  "NAME "plugin"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "raise"",
  "NAME "ValueError"",
  "OP ","",
  "STRING "must convert project to a format before saving"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "for"",
  "NAME "m"",
  "NAME "in"",
  "NAME "p"",
  "OP "."",
  "NAME "convert"",
  "OP "("",
  "NAME "plugin"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "print"",
  "NAME "m"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "result"",
  "OP "="",
  "NAME "p"",
  "OP "."",
  "NAME "_save"",
  "OP "("",
  "NAME "fp"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "path"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "fp"",
  "OP "."",
  "NAME "close"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "return"",
  "NAME "result"",
  "NAME "if"",
  "NAME "debug"",
  "NAME "else"",
  "NAME "p"",
  "OP "."",
  "NAME "path"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "_save"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "fp"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "_plugin"",
  "OP "."",
  "NAME "save"",
  "OP "("",
  "NAME "fp"",
  "OP ","",
  "NAME "self"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "_normalize"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Convert the project to a standardised form for the current plugin.\\r\\n\\r\\n        Called after loading, before saving, and when converting to a new\\r\\n        format.\\r\\n\\r\\n        Yields UnsupportedFeature instances.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "unique_sprite_names"",
  "OP "="",
  "NAME "set"",
  "OP "("",
  "NAME "sprite"",
  "OP "."",
  "NAME "name"",
  "NAME "for"",
  "NAME "sprite"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "sprites"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "len"",
  "OP "("",
  "NAME "unique_sprite_names"",
  "OP ")"",
  "OP "<"",
  "NAME "len"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "sprites"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "raise"",
  "NAME "ValueError"",
  "OP ","",
  "STRING "Sprite names must be unique"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# sync self.sprites and self.actors"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "for"",
  "NAME "sprite"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "sprites"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "if"",
  "NAME "sprite"",
  "NAME "not"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "actors"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "self"",
  "OP "."",
  "NAME "actors"",
  "OP "."",
  "NAME "append"",
  "OP "("",
  "NAME "sprite"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "for"",
  "NAME "actor"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "actors"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "actor"",
  "OP ","",
  "NAME "Sprite"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "if"",
  "NAME "actor"",
  "NAME "not"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "sprites"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "raise"",
  "NAME "ValueError"",
  "OP ","",
  "NEWLINE "\\n"",
  "INDENT "                        "",
  "STRING "Can't have sprite on stage that isn't in sprites"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# normalize Scriptables"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "DEDENT """,
  "DEDENT """,
  "NAME "self"",
  "OP "."",
  "NAME "stage"",
  "OP "."",
  "NAME "_normalize"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "for"",
  "NAME "sprite"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "sprites"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "sprite"",
  "OP "."",
  "NAME "_normalize"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# normalize actors"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "for"",
  "NAME "actor"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "actors"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "if"",
  "NAME "not"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "actor"",
  "OP ","",
  "NAME "Scriptable"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "actor"",
  "OP "."",
  "NAME "_normalize"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# make Watchers if needed"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "for"",
  "NAME "thing"",
  "NAME "in"",
  "OP "["",
  "NAME "self"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "stage"",
  "OP "]"",
  "OP "+"",
  "NAME "self"",
  "OP "."",
  "NAME "sprites"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "for"",
  "OP "("",
  "NAME "name"",
  "OP ","",
  "NAME "var"",
  "OP ")"",
  "NAME "in"",
  "NAME "thing"",
  "OP "."",
  "NAME "variables"",
  "OP "."",
  "NAME "items"",
  "OP "("",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "if"",
  "NAME "not"",
  "NAME "var"",
  "OP "."",
  "NAME "watcher"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "var"",
  "OP "."",
  "NAME "watcher"",
  "OP "="",
  "NAME "kurt"",
  "OP "."",
  "NAME "Watcher"",
  "OP "("",
  "NAME "thing"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "kurt"",
  "OP "."",
  "NAME "Block"",
  "OP "("",
  "STRING "var"",
  "OP ","",
  "NAME "name"",
  "OP ")"",
  "OP ","",
  "NAME "is_visible"",
  "OP "="",
  "NAME "False"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "actors"",
  "OP "."",
  "NAME "append"",
  "OP "("",
  "NAME "var"",
  "OP "."",
  "NAME "watcher"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "for"",
  "OP "("",
  "NAME "name"",
  "OP ","",
  "NAME "list_"",
  "OP ")"",
  "NAME "in"",
  "NAME "thing"",
  "OP "."",
  "NAME "lists"",
  "OP "."",
  "NAME "items"",
  "OP "("",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "if"",
  "NAME "not"",
  "NAME "list_"",
  "OP "."",
  "NAME "watcher"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "list_"",
  "OP "."",
  "NAME "watcher"",
  "OP "="",
  "NAME "kurt"",
  "OP "."",
  "NAME "Watcher"",
  "OP "("",
  "NAME "thing"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "kurt"",
  "OP "."",
  "NAME "Block"",
  "OP "("",
  "STRING "list"",
  "OP ","",
  "NAME "name"",
  "OP ")"",
  "OP ","",
  "NAME "is_visible"",
  "OP "="",
  "NAME "False"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "actors"",
  "OP "."",
  "NAME "append"",
  "OP "("",
  "NAME "list_"",
  "OP "."",
  "NAME "watcher"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# notes - line endings"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "DEDENT """,
  "NAME "self"",
  "OP "."",
  "NAME "notes"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "notes"",
  "OP "."",
  "NAME "replace"",
  "OP "("",
  "STRING "\\\\r\\\\n"",
  "OP ","",
  "STRING "\\\\n"",
  "OP ")"",
  "OP "."",
  "NAME "replace"",
  "OP "("",
  "STRING "\\\\r"",
  "OP ","",
  "STRING "\\\\n"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# convert scripts"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "convert_block"",
  "OP "("",
  "NAME "block"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "COMMENT "# convert block"",
  "NL "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "try"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "block"",
  "OP "."",
  "NAME "type"",
  "OP ","",
  "NAME "CustomBlockType"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "if"",
  "STRING "Custom Blocks"",
  "NAME "not"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "_plugin"",
  "OP "."",
  "NAME "features"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                        "",
  "NAME "raise"",
  "NAME "BlockNotSupported"",
  "OP "("",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "%s doesn't support custom blocks"",
  "NL "\\r"",
  "NL "\\n"",
  "OP "%"",
  "NAME "self"",
  "OP "."",
  "NAME "_plugin"",
  "OP "."",
  "NAME "display_name"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "COMMENT "# BlockType"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "pbt"",
  "OP "="",
  "NAME "block"",
  "OP "."",
  "NAME "type"",
  "OP "."",
  "NAME "convert"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "_plugin"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "except"",
  "NAME "BlockNotSupported"",
  "OP ","",
  "NAME "err"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "err"",
  "OP "."",
  "NAME "message"",
  "OP "+="",
  "STRING ". Caused by: %r"",
  "OP "%"",
  "NAME "block"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "err"",
  "OP "."",
  "NAME "block"",
  "OP "="",
  "NAME "block"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "err"",
  "OP "."",
  "NAME "scriptable"",
  "OP "="",
  "NAME "scriptable"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "err"",
  "OP "."",
  "NAME "args"",
  "OP "="",
  "OP "("",
  "NAME "err"",
  "OP "."",
  "NAME "message"",
  "OP ","",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "getattr"",
  "OP "("",
  "NAME "block"",
  "OP "."",
  "NAME "type"",
  "OP ","",
  "STRING "_workaround"",
  "OP ","",
  "NAME "None"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "block"",
  "OP "="",
  "NAME "block"",
  "OP "."",
  "NAME "type"",
  "OP "."",
  "NAME "_workaround"",
  "OP "("",
  "NAME "block"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "not"",
  "NAME "block"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                        "",
  "NAME "raise"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "raise"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# convert args"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "args"",
  "OP "="",
  "OP "["",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "for"",
  "NAME "arg"",
  "NAME "in"",
  "NAME "block"",
  "OP "."",
  "NAME "args"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "arg"",
  "OP ","",
  "NAME "Block"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "arg"",
  "OP "="",
  "NAME "convert_block"",
  "OP "("",
  "NAME "arg"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "elif"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "arg"",
  "OP ","",
  "NAME "list"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "arg"",
  "OP "="",
  "NAME "map"",
  "OP "("",
  "NAME "convert_block"",
  "OP ","",
  "NAME "arg"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "args"",
  "OP "."",
  "NAME "append"",
  "OP "("",
  "NAME "arg"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "block"",
  "OP "."",
  "NAME "args"",
  "OP "="",
  "NAME "args"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "block"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "for"",
  "NAME "scriptable"",
  "NAME "in"",
  "OP "["",
  "NAME "self"",
  "OP "."",
  "NAME "stage"",
  "OP "]"",
  "OP "+"",
  "NAME "self"",
  "OP "."",
  "NAME "sprites"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "for"",
  "NAME "script"",
  "NAME "in"",
  "NAME "scriptable"",
  "OP "."",
  "NAME "scripts"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "script"",
  "OP ","",
  "NAME "Script"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "script"",
  "OP "."",
  "NAME "blocks"",
  "OP "="",
  "NAME "map"",
  "OP "("",
  "NAME "convert_block"",
  "OP ","",
  "NAME "script"",
  "OP "."",
  "NAME "blocks"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# workaround unsupported features"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "DEDENT """,
  "NAME "for"",
  "NAME "feature"",
  "NAME "in"",
  "NAME "kurt"",
  "OP "."",
  "NAME "plugin"",
  "OP "."",
  "NAME "Feature"",
  "OP "."",
  "NAME "FEATURES"",
  "OP "."",
  "NAME "values"",
  "OP "("",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "if"",
  "NAME "feature"",
  "NAME "not"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "_plugin"",
  "OP "."",
  "NAME "features"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "for"",
  "NAME "x"",
  "NAME "in"",
  "NAME "feature"",
  "OP "."",
  "NAME "workaround"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "yield"",
  "NAME "UnsupportedFeature"",
  "OP "("",
  "NAME "feature"",
  "OP ","",
  "NAME "x"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# normalize supported features"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "DEDENT """,
  "NAME "for"",
  "NAME "feature"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "_plugin"",
  "OP "."",
  "NAME "features"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "feature"",
  "OP "."",
  "NAME "normalize"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "def"",
  "NAME "get_broadcasts"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "def"",
  "NAME "get_broadcasts"",
  "OP "("",
  "NAME "block"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "for"",
  "OP "("",
  "NAME "arg"",
  "OP ","",
  "NAME "insert"",
  "OP ")"",
  "NAME "in"",
  "NAME "zip"",
  "OP "("",
  "NAME "block"",
  "OP "."",
  "NAME "args"",
  "OP ","",
  "NAME "block"",
  "OP "."",
  "NAME "type"",
  "OP "."",
  "NAME "inserts"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "arg"",
  "OP ","",
  "NAME "Block"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "for"",
  "NAME "b"",
  "NAME "in"",
  "NAME "get_broadcasts"",
  "OP "("",
  "NAME "arg"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                        "",
  "NAME "yield"",
  "NAME "b"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "elif"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "arg"",
  "OP ","",
  "NAME "list"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "for"",
  "NAME "arg_block"",
  "NAME "in"",
  "NAME "arg"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                        "",
  "NAME "for"",
  "NAME "b"",
  "NAME "in"",
  "NAME "get_broadcasts"",
  "OP "("",
  "NAME "arg_block"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                            "",
  "NAME "yield"",
  "NAME "b"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "DEDENT """,
  "NAME "elif"",
  "NAME "insert"",
  "OP "."",
  "NAME "kind"",
  "OP "=="",
  "STRING "broadcast"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "yield"",
  "NAME "arg"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "DEDENT """,
  "NAME "for"",
  "NAME "scriptable"",
  "NAME "in"",
  "OP "["",
  "NAME "self"",
  "OP "."",
  "NAME "stage"",
  "OP "]"",
  "OP "+"",
  "NAME "self"",
  "OP "."",
  "NAME "sprites"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "for"",
  "NAME "script"",
  "NAME "in"",
  "NAME "scriptable"",
  "OP "."",
  "NAME "scripts"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "for"",
  "NAME "block"",
  "NAME "in"",
  "NAME "script"",
  "OP "."",
  "NAME "blocks"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "for"",
  "NAME "b"",
  "NAME "in"",
  "NAME "get_broadcasts"",
  "OP "("",
  "NAME "block"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                        "",
  "NAME "yield"",
  "NAME "b"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "DEDENT """,
  "DEDENT """,
  "DEDENT """,
  "DEDENT """,
  "NAME "class"",
  "NAME "UnsupportedFeature"",
  "OP "("",
  "NAME "object"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "The plugin doesn't support this Feature.\\r\\n\\r\\n    Output once by Project.convert for each occurence of the feature.\\r\\n\\r\\n    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "feature"",
  "OP ","",
  "NAME "obj"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "self"",
  "OP "."",
  "NAME "feature"",
  "OP "="",
  "NAME "kurt"",
  "OP "."",
  "NAME "plugin"",
  "OP "."",
  "NAME "Feature"",
  "OP "."",
  "NAME "get"",
  "OP "("",
  "NAME "feature"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "obj"",
  "OP "="",
  "NAME "obj"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__repr__"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "STRING "<%s.%s(%s)>"",
  "OP "%"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__module__"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__name__"",
  "OP ","",
  "NAME "unicode"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__str__"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "STRING "UnsupportedFeature: %s"",
  "OP "%"",
  "NAME "unicode"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__unicode__"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "NAME "u"",
  "STRING "%r: %r"",
  "OP "%"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "feature"",
  "OP "."",
  "NAME "name"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "obj"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "#-- Errors --#"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "class"",
  "NAME "UnknownFormat"",
  "OP "("",
  "NAME "Exception"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "The file extension is not recognised.\\r\\n\\r\\n    Raised when :class:\`Project\` can't find a valid format plugin to handle the\\r\\n    file extension.\\r\\n\\r\\n    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "pass"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "class"",
  "NAME "UnknownBlock"",
  "OP "("",
  "NAME "Exception"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "A :class:\`Block\` with the given command or type cannot be found.\\r\\n\\r\\n    Raised by :attr:\`BlockType.get\`.\\r\\n\\r\\n    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "class"",
  "NAME "BlockNotSupported"",
  "OP "("",
  "NAME "Exception"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "The plugin doesn't support this Block.\\r\\n\\r\\n    Raised by :attr:\`Block.convert\` when it can't find a\\r\\n    :class:\`PluginBlockType\` for the given plugin.\\r\\n\\r\\n    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "pass"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "class"",
  "NAME "VectorImageError"",
  "OP "("",
  "NAME "Exception"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "Tried to construct a raster image from a vector format image file.\\r\\n\\r\\n    You shouldn't usally get this error, because Feature(\\"Vector Images\\") will\\r\\n    give a warning instead when the Project is converted.\\r\\n\\r\\n    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "pass"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "#-- Actors & Scriptables --#"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "class"",
  "NAME "Actor"",
  "OP "("",
  "NAME "object"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "An object that goes on the project stage.\\r\\n\\r\\n    Subclasses include :class:\`Watcher\` or :class:\`Sprite\`.\\r\\n\\r\\n    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "class"",
  "NAME "Scriptable"",
  "OP "("",
  "NAME "object"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "Superclass for all scriptable objects.\\r\\n\\r\\n    Subclasses are :class:\`Stage\` and :class:\`Sprite\`.\\r\\n\\r\\n    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "project"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "self"",
  "OP "."",
  "NAME "project"",
  "OP "="",
  "NAME "project"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The :class:\`Project\` this belongs to."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "scripts"",
  "OP "="",
  "OP "["",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The contents of the scripting area.\\r\\n\\r\\n        List containing :class:\`Scripts <Script>\` and :class:\`Comments\\r\\n        <Comment>\`.\\r\\n\\r\\n        Will be sorted by y position on load/save.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "custom_blocks"",
  "OP "="",
  "OP "{"",
  "OP "}"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "Scripts for custom blocks, indexed by :class:\`CustomBlockType\`."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "variables"",
  "OP "="",
  "OP "{"",
  "OP "}"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING ":class:\`dict\` of :class:\`Variables <Variable>\` by name."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "lists"",
  "OP "="",
  "OP "{"",
  "OP "}"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING ":class:\`dict\` of :class:\`Lists <List>\` by name."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "costumes"",
  "OP "="",
  "OP "["",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "List of :class:\`Costumes <Costume>\`."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "sounds"",
  "OP "="",
  "OP "["",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "List of :class:\`Sounds <Sound>\`."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "costume"",
  "OP "="",
  "NAME "None"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The currently selected :class:\`Costume\`.\\r\\n\\r\\n        Defaults to the first costume in :attr:\`self.costumes\` on save.\\r\\n\\r\\n        If a sprite doesn't have a costume, a black 1x1 pixel square will be\\r\\n        used.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "volume"",
  "OP "="",
  "NUMBER "100"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The volume in percent used for note and sound blocks."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "_normalize"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "COMMENT "# costumes"",
  "NL "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "costume"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "COMMENT "# Make sure it's in costumes"",
  "NL "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "costume"",
  "NAME "not"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "costumes"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "self"",
  "OP "."",
  "NAME "costumes"",
  "OP "."",
  "NAME "append"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "costume"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "COMMENT "# No costume!"",
  "NL "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "costumes"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "self"",
  "OP "."",
  "NAME "costume"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "costumes"",
  "OP "["",
  "NUMBER "0"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "BLACK"",
  "OP "="",
  "OP "("",
  "NUMBER "0"",
  "OP ","",
  "NUMBER "0"",
  "OP ","",
  "NUMBER "0"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "costume"",
  "OP "="",
  "NAME "Costume"",
  "OP "("",
  "STRING "blank"",
  "OP ","",
  "NAME "Image"",
  "OP "."",
  "NAME "new"",
  "OP "("",
  "OP "("",
  "NUMBER "1"",
  "OP ","",
  "NUMBER "1"",
  "OP ")"",
  "OP ","",
  "NAME "BLACK"",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "costumes"",
  "OP "="",
  "OP "["",
  "NAME "self"",
  "OP "."",
  "NAME "costume"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# scripts"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "for"",
  "NAME "script"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "scripts"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "script"",
  "OP "."",
  "NAME "_normalize"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# sort scripts by y position"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "have_position"",
  "OP "="",
  "OP "["",
  "NAME "s"",
  "NAME "for"",
  "NAME "s"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "scripts"",
  "NAME "if"",
  "NAME "s"",
  "OP "."",
  "NAME "pos"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "no_position"",
  "OP "="",
  "OP "["",
  "NAME "s"",
  "NAME "for"",
  "NAME "s"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "scripts"",
  "NAME "if"",
  "NAME "not"",
  "NAME "s"",
  "OP "."",
  "NAME "pos"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "have_position"",
  "OP "."",
  "NAME "sort"",
  "OP "("",
  "NAME "key"",
  "OP "="",
  "NAME "lambda"",
  "NAME "s"",
  "OP ":"",
  "OP "("",
  "NAME "s"",
  "OP "."",
  "NAME "pos"",
  "OP "["",
  "NUMBER "1"",
  "OP "]"",
  "OP ","",
  "NAME "s"",
  "OP "."",
  "NAME "pos"",
  "OP "["",
  "NUMBER "0"",
  "OP "]"",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "scripts"",
  "OP "="",
  "NAME "have_position"",
  "OP "+"",
  "NAME "no_position"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "copy"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "o"",
  "OP "="",
  "NAME "None"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Return a new instance, deep-copying all the attributes."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "o"",
  "NAME "is"",
  "NAME "None"",
  "OP ":"",
  "NAME "o"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "project"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "o"",
  "OP "."",
  "NAME "scripts"",
  "OP "="",
  "OP "["",
  "NAME "s"",
  "OP "."",
  "NAME "copy"",
  "OP "("",
  "OP ")"",
  "NAME "for"",
  "NAME "s"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "scripts"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "o"",
  "OP "."",
  "NAME "variables"",
  "OP "="",
  "NAME "dict"",
  "OP "("",
  "OP "("",
  "NAME "n"",
  "OP ","",
  "NAME "v"",
  "OP "."",
  "NAME "copy"",
  "OP "("",
  "OP ")"",
  "OP ")"",
  "NAME "for"",
  "OP "("",
  "NAME "n"",
  "OP ","",
  "NAME "v"",
  "OP ")"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "variables"",
  "OP "."",
  "NAME "items"",
  "OP "("",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "o"",
  "OP "."",
  "NAME "lists"",
  "OP "="",
  "NAME "dict"",
  "OP "("",
  "OP "("",
  "NAME "n"",
  "OP ","",
  "NAME "l"",
  "OP "."",
  "NAME "copy"",
  "OP "("",
  "OP ")"",
  "OP ")"",
  "NAME "for"",
  "OP "("",
  "NAME "n"",
  "OP ","",
  "NAME "l"",
  "OP ")"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "lists"",
  "OP "."",
  "NAME "items"",
  "OP "("",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "o"",
  "OP "."",
  "NAME "costumes"",
  "OP "="",
  "OP "["",
  "NAME "c"",
  "OP "."",
  "NAME "copy"",
  "OP "("",
  "OP ")"",
  "NAME "for"",
  "NAME "c"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "costumes"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "o"",
  "OP "."",
  "NAME "sounds"",
  "OP "="",
  "OP "["",
  "NAME "s"",
  "OP "."",
  "NAME "copy"",
  "OP "("",
  "OP ")"",
  "NAME "for"",
  "NAME "s"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "sounds"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "o"",
  "OP "."",
  "NAME "costume_index"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "costume_index"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "o"",
  "OP "."",
  "NAME "volume"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "volume"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "o"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "property"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "costume_index"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "The index of :attr:\`costume\` in :attr:\`costumes\`.\\r\\n\\r\\n        None if no costume is selected.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "costume"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "costumes"",
  "OP "."",
  "NAME "index"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "costume"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "OP "@"",
  "NAME "costume_index"",
  "OP "."",
  "NAME "setter"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "costume_index"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "index"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "if"",
  "NAME "index"",
  "NAME "is"",
  "NAME "None"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "self"",
  "OP "."",
  "NAME "costume"",
  "OP "="",
  "NAME "None"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "self"",
  "OP "."",
  "NAME "costume"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "costumes"",
  "OP "["",
  "NAME "index"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "def"",
  "NAME "parse"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "text"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Parse the given code and add it to :attr:\`scripts\`.\\r\\n\\r\\n        The syntax matches :attr:\`Script.stringify()\`. See :mod:\`kurt.text\` for\\r\\n        reference.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "scripts"",
  "OP "."",
  "NAME "append"",
  "OP "("",
  "NAME "kurt"",
  "OP "."",
  "NAME "text"",
  "OP "."",
  "NAME "parse"",
  "OP "("",
  "NAME "text"",
  "OP ","",
  "NAME "self"",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "class"",
  "NAME "Stage"",
  "OP "("",
  "NAME "Scriptable"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "Represents the background of the project. The stage is similar to a\\r\\n    :class:\`Sprite\`, but has a fixed position. The stage has a fixed size of\\r\\n    \`\`480x360\`\` pixels.\\r\\n\\r\\n    The stage does not require a costume. If none is given, it is assumed to be\\r\\n    white (#FFF).\\r\\n\\r\\n    Not all formats have stage-specific variables and lists. Global variables\\r\\n    and lists are stored on the :class:\`Project\`.\\r\\n\\r\\n    :param project: The :class:\`Project\` this Stage belongs to.\\r\\n                    Note that you still need to set :attr:\`Project.stage\` to\\r\\n                    this Stage instance.\\r\\n\\r\\n    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "name"",
  "OP "="",
  "STRING "Stage"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "is_draggable"",
  "OP "="",
  "NAME "False"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "is_visible"",
  "OP "="",
  "NAME "True"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "SIZE"",
  "OP "="",
  "OP "("",
  "NUMBER "480"",
  "OP ","",
  "NUMBER "360"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "COLOR"",
  "OP "="",
  "OP "("",
  "NUMBER "255"",
  "OP ","",
  "NUMBER "255"",
  "OP ","",
  "NUMBER "255"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "project"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "Scriptable"",
  "OP "."",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "project"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "property"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "backgrounds"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Alias for :attr:\`costumes\`."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "costumes"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "backgrounds"",
  "OP "."",
  "NAME "setter"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "backgrounds"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "value"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "self"",
  "OP "."",
  "NAME "costumes"",
  "OP "="",
  "NAME "value"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__repr__"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "STRING "<%s.%s()>"",
  "OP "%"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__module__"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__name__"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "_normalize"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "if"",
  "NAME "not"",
  "NAME "self"",
  "OP "."",
  "NAME "costume"",
  "NAME "and"",
  "NAME "not"",
  "NAME "self"",
  "OP "."",
  "NAME "costumes"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "self"",
  "OP "."",
  "NAME "costume"",
  "OP "="",
  "NAME "Costume"",
  "OP "("",
  "STRING "blank"",
  "OP ","",
  "NAME "Image"",
  "OP "."",
  "NAME "new"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "SIZE"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "COLOR"",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "Scriptable"",
  "OP "."",
  "NAME "_normalize"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "class"",
  "NAME "Sprite"",
  "OP "("",
  "NAME "Scriptable"",
  "OP ","",
  "NAME "Actor"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "A scriptable object displayed on the project stage. Can be moved and\\r\\n    rotated, unlike the :class:\`Stage\`.\\r\\n\\r\\n    Sprites require a :attr:\`costume\`, and will raise an error when saving\\r\\n    without one.\\r\\n\\r\\n    :param project: The :class:\`Project\` this Sprite belongs to.\\r\\n                    Note that you still need to add this sprite to\\r\\n                    :attr:\`Project.sprites\`.\\r\\n\\r\\n    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "project"",
  "OP ","",
  "NAME "name"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "Scriptable"",
  "OP "."",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "project"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "name"",
  "OP "="",
  "NAME "unicode"",
  "OP "("",
  "NAME "name"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The name of the sprite, as referred to from scripts and displayed in\\r\\n        the Scratch interface.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "position"",
  "OP "="",
  "OP "("",
  "NUMBER "0"",
  "OP ","",
  "NUMBER "0"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The \`\`(x, y)\`\` position of the centre of the sprite in Scratch\\r\\n        co-ordinates.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "direction"",
  "OP "="",
  "NUMBER "90.0"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The angle in degrees the sprite is rotated to."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "rotation_style"",
  "OP "="",
  "STRING "normal"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "How the sprite's costume rotates with the sprite. Valid values are:\\r\\n\\r\\n        \`\`'normal'\`\`\\r\\n            Continuous rotation with :attr:\`direction\`. The default.\\r\\n\\r\\n        \`\`'leftRight'\`\`\\r\\n            Don't rotate. Instead, flip the costume for directions with x\\r\\n            component < 0. Useful for side-views.\\r\\n\\r\\n        \`\`'none'\`\`\\r\\n            Don't rotate with direction.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "size"",
  "OP "="",
  "NUMBER "100.0"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The scale factor of the sprite in percent. Defaults to 100."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "is_draggable"",
  "OP "="",
  "NAME "False"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "True if the sprite can be dragged using the mouse in the\\r\\n        player/presentation mode.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "is_visible"",
  "OP "="",
  "NAME "True"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "Whether the sprite is shown on the stage. False if the sprite is\\r\\n        hidden.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "_normalize"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "Scriptable"",
  "OP "."",
  "NAME "_normalize"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "assert"",
  "NAME "self"",
  "OP "."",
  "NAME "rotation_style"",
  "NAME "in"",
  "OP "("",
  "STRING "normal"",
  "OP ","",
  "STRING "leftRight"",
  "OP ","",
  "STRING "none"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "copy"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Return a new instance, deep-copying all the attributes."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "o"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "project"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "name"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "Scriptable"",
  "OP "."",
  "NAME "copy"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "o"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "o"",
  "OP "."",
  "NAME "position"",
  "OP "="",
  "NAME "tuple"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "position"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "o"",
  "OP "."",
  "NAME "direction"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "direction"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "o"",
  "OP "."",
  "NAME "rotation_style"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "rotation_style"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "o"",
  "OP "."",
  "NAME "size"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "size"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "o"",
  "OP "."",
  "NAME "is_draggable"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "is_draggable"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "o"",
  "OP "."",
  "NAME "is_visible"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "is_visible"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "o"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__repr__"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "STRING "<%s.%s(%r)>"",
  "OP "%"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__module__"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__name__"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "name"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "class"",
  "NAME "Watcher"",
  "OP "("",
  "NAME "Actor"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "A monitor for displaying a data value on the stage.\\r\\n\\r\\n    Some formats won't save hidden watchers, and so their position won't be\\r\\n    remembered.\\r\\n\\r\\n    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "target"",
  "OP ","",
  "NAME "block"",
  "OP ","",
  "NAME "style"",
  "OP "="",
  "STRING "normal"",
  "OP ","",
  "NAME "is_visible"",
  "OP "="",
  "NAME "True"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "pos"",
  "OP "="",
  "NAME "None"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "Actor"",
  "OP "."",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "assert"",
  "NAME "target"",
  "NAME "is"",
  "NAME "not"",
  "NAME "None"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "target"",
  "OP "="",
  "NAME "target"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The :attr:\`Scriptable\` or :attr:\`Project\` the watcher belongs to.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "block"",
  "OP "="",
  "NAME "block"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The :attr:\`Block\` to evaluate on :attr:\`target\`.\\r\\n\\r\\n        For variables::\\r\\n\\r\\n            kurt.Block('readVariable', 'variable name')\\r\\n\\r\\n        For lists::\\r\\n\\r\\n            kurt.Block('contentsOfList:', 'list name')\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "style"",
  "OP "="",
  "NAME "str"",
  "OP "("",
  "NAME "style"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "How the watcher should appear.\\r\\n\\r\\n        Valid values:\\r\\n\\r\\n        \`\`'normal'\`\`\\r\\n            The name of the data is displayed next to its value. The only\\r\\n            valid value for list watchers.\\r\\n\\r\\n        \`\`'large'\`\`\\r\\n            The data is displayed in a larger font with no describing text.\\r\\n\\r\\n        \`\`'slider'\`\`\\r\\n            Like the normal style, but displayed with a slider that can change\\r\\n            the variable's value. Not valid for reporter block watchers.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "pos"",
  "OP "="",
  "NAME "pos"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "\`\`(x, y)\`\` position of the top-left of the watcher from the top-left\\r\\n        of the stage in pixels. None if not specified.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "is_visible"",
  "OP "="",
  "NAME "bool"",
  "OP "("",
  "NAME "is_visible"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "Whether the watcher is displayed on the screen.\\r\\n\\r\\n        Some formats won't save hidden watchers, and so their position won't be\\r\\n        remembered.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "slider_min"",
  "OP "="",
  "NUMBER "0"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "Minimum value for slider. Only applies to \`\`\\"slider\\"\`\` style."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "slider_max"",
  "OP "="",
  "NUMBER "100"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "Maximum value for slider. Only applies to \`\`\\"slider\\"\`\` style."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "_normalize"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "_normalize"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "assert"",
  "NAME "self"",
  "OP "."",
  "NAME "style"",
  "NAME "in"",
  "OP "("",
  "STRING "normal"",
  "OP ","",
  "STRING "large"",
  "OP ","",
  "STRING "slider"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "value"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "self"",
  "OP "."",
  "NAME "value"",
  "OP "."",
  "NAME "watcher"",
  "OP "="",
  "NAME "self"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "def"",
  "NAME "copy"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Return a new instance with the same attributes."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "o"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "target"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "block"",
  "OP "."",
  "NAME "copy"",
  "OP "("",
  "OP ")"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "style"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "is_visible"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "pos"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "o"",
  "OP "."",
  "NAME "slider_min"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "slider_min"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "o"",
  "OP "."",
  "NAME "slider_max"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "slider_max"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "o"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "property"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "kind"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "The type of value to watch, based on :attr:\`block\`.\\r\\n\\r\\n        One of \`\`variable\`\`, \`\`list\`\`, or \`\`block\`\`.\\r\\n\\r\\n        \`\`block\`\` watchers watch the value of a reporter block.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "block"",
  "OP "."",
  "NAME "type"",
  "OP "."",
  "NAME "has_command"",
  "OP "("",
  "STRING "readVariable"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "return"",
  "STRING "variable"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "elif"",
  "NAME "self"",
  "OP "."",
  "NAME "block"",
  "OP "."",
  "NAME "type"",
  "OP "."",
  "NAME "has_command"",
  "OP "("",
  "STRING "contentsOfList:"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "return"",
  "STRING "list"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "return"",
  "STRING "block"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "OP "@"",
  "NAME "property"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "value"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Return the :class:\`Variable\` or :class:\`List\` to watch.\\r\\n\\r\\n        Returns \`\`None\`\` if it's a block watcher.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "kind"",
  "OP "=="",
  "STRING "variable"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "target"",
  "OP "."",
  "NAME "variables"",
  "OP "["",
  "NAME "self"",
  "OP "."",
  "NAME "block"",
  "OP "."",
  "NAME "args"",
  "OP "["",
  "NUMBER "0"",
  "OP "]"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "elif"",
  "NAME "self"",
  "OP "."",
  "NAME "kind"",
  "OP "=="",
  "STRING "list"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "target"",
  "OP "."",
  "NAME "lists"",
  "OP "["",
  "NAME "self"",
  "OP "."",
  "NAME "block"",
  "OP "."",
  "NAME "args"",
  "OP "["",
  "NUMBER "0"",
  "OP "]"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "def"",
  "NAME "__repr__"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "r"",
  "OP "="",
  "STRING "%s.%s(%r, %r"",
  "OP "%"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__module__"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__name__"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "target"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "block"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "style"",
  "OP "!="",
  "STRING "normal"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "r"",
  "OP "+="",
  "STRING ", style=%r"",
  "OP "%"",
  "NAME "self"",
  "OP "."",
  "NAME "style"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "if"",
  "NAME "not"",
  "NAME "self"",
  "OP "."",
  "NAME "is_visible"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "r"",
  "OP "+="",
  "STRING ", is_visible=False"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "pos"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "r"",
  "OP "+="",
  "STRING ", pos=%s"",
  "OP "%"",
  "NAME "repr"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "pos"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "r"",
  "OP "+="",
  "STRING ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "r"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "#-- Variables --#"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "class"",
  "NAME "Variable"",
  "OP "("",
  "NAME "object"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "A memory value used in scripts.\\r\\n\\r\\n    There are both :attr:\`global variables <Project.variables>\` and\\r\\n    :attr:\`sprite-specific variables <Sprite.variables>\`.\\r\\n\\r\\n    Some formats also have :attr:\`stage-specific variables <Stage.variables>\`.\\r\\n\\r\\n    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "value"",
  "OP "="",
  "NUMBER "0"",
  "OP ","",
  "NAME "is_cloud"",
  "OP "="",
  "NAME "False"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "self"",
  "OP "."",
  "NAME "value"",
  "OP "="",
  "NAME "value"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The value of the variable, usually a number or a string.\\r\\n\\r\\n        For some formats, variables can take list values, and :class:\`List\` is\\r\\n        not used.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "is_cloud"",
  "OP "="",
  "NAME "bool"",
  "OP "("",
  "NAME "is_cloud"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "Whether the value of the variable is shared with other users.\\r\\n\\r\\n        For Scratch 2.0.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "watcher"",
  "OP "="",
  "NAME "None"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The :class:\`Watcher\` instance displaying this Variable's value."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "copy"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Return a new instance with the same attributes."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "value"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "is_cloud"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__repr__"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "r"",
  "OP "="",
  "STRING "%s.%s(%r"",
  "OP "%"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__module__"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__name__"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "value"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "is_cloud"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "r"",
  "OP "+="",
  "STRING ", is_cloud=%r"",
  "OP "%"",
  "NAME "self"",
  "OP "."",
  "NAME "is_cloud"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "r"",
  "OP "+="",
  "STRING ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "r"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "class"",
  "NAME "List"",
  "OP "("",
  "NAME "object"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "A sequence of items used in scripts.\\r\\n\\r\\n    Each item takes a :class:\`Variable\`-like value.\\r\\n\\r\\n    Lists cannot be nested. However, for some formats, variables can take\\r\\n    list values, and this class is not used.\\r\\n\\r\\n    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "items"",
  "OP "="",
  "NAME "None"",
  "OP ","",
  "NAME "is_cloud"",
  "OP "="",
  "NAME "False"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "self"",
  "OP "."",
  "NAME "items"",
  "OP "="",
  "NAME "list"",
  "OP "("",
  "NAME "items"",
  "OP ")"",
  "NAME "if"",
  "NAME "items"",
  "NAME "else"",
  "OP "["",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The items contained in the list. A Python list of unicode\\r\\n        strings.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "is_cloud"",
  "OP "="",
  "NAME "bool"",
  "OP "("",
  "NAME "is_cloud"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "Whether the value of the list is shared with other users.\\r\\n\\r\\n        For Scratch 2.0.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "watcher"",
  "OP "="",
  "NAME "None"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The :class:\`Watcher\` instance displaying this List's value."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "_normalize"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "_normalize"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "self"",
  "OP "."",
  "NAME "items"",
  "OP "="",
  "NAME "map"",
  "OP "("",
  "NAME "unicode"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "items"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "copy"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Return a new instance with the same attributes."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "items"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "is_cloud"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__repr__"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "r"",
  "OP "="",
  "STRING "<%s.%s(%i items)>"",
  "OP "%"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__module__"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__name__"",
  "OP ","",
  "NAME "len"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "items"",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "is_cloud"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "r"",
  "OP "+="",
  "STRING ", is_cloud=%r"",
  "OP "%"",
  "NAME "self"",
  "OP "."",
  "NAME "is_cloud"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "r"",
  "OP "+="",
  "STRING ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "r"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "#-- Color --#"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "class"",
  "NAME "Color"",
  "OP "("",
  "NAME "object"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "A 24-bit RGB color value.\\r\\n\\r\\n    Accepts tuple or hexcode arguments::\\r\\n\\r\\n        >>> kurt.Color('#f08')\\r\\n        kurt.Color(255, 0, 136)\\r\\n\\r\\n        >>> kurt.Color((255, 0, 136))\\r\\n        kurt.Color(255, 0, 136)\\r\\n\\r\\n        >>> kurt.Color('#f0ffee')\\r\\n        kurt.Color(240, 255, 238)\\r\\n\\r\\n    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "r"",
  "OP ","",
  "NAME "g"",
  "OP "="",
  "NAME "None"",
  "OP ","",
  "NAME "b"",
  "OP "="",
  "NAME "None"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "if"",
  "NAME "g"",
  "NAME "is"",
  "NAME "None"",
  "NAME "and"",
  "NAME "b"",
  "NAME "is"",
  "NAME "None"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "r"",
  "OP ","",
  "NAME "Color"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "r"",
  "OP "="",
  "NAME "r"",
  "OP "."",
  "NAME "value"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "elif"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "r"",
  "OP ","",
  "NAME "basestring"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "if"",
  "NAME "not"",
  "NAME "r"",
  "OP "."",
  "NAME "startswith"",
  "OP "("",
  "STRING "#"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "raise"",
  "NAME "ValueError"",
  "OP ","",
  "STRING "invalid color hexcode: %r"",
  "OP "%"",
  "NAME "r"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "r"",
  "OP "="",
  "NAME "r"",
  "OP "["",
  "NUMBER "1"",
  "OP ":"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "len"",
  "OP "("",
  "NAME "r"",
  "OP ")"",
  "OP "=="",
  "NUMBER "3"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "r"",
  "OP "="",
  "NAME "r"",
  "OP "["",
  "NUMBER "0"",
  "OP "]"",
  "OP "+"",
  "NAME "r"",
  "OP "["",
  "NUMBER "0"",
  "OP "]"",
  "OP "+"",
  "NAME "r"",
  "OP "["",
  "NUMBER "1"",
  "OP "]"",
  "OP "+"",
  "NAME "r"",
  "OP "["",
  "NUMBER "1"",
  "OP "]"",
  "OP "+"",
  "NAME "r"",
  "OP "["",
  "NUMBER "2"",
  "OP "]"",
  "OP "+"",
  "NAME "r"",
  "OP "["",
  "NUMBER "2"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "split"",
  "OP "="",
  "OP "("",
  "NAME "r"",
  "OP "["",
  "NUMBER "0"",
  "OP ":"",
  "NUMBER "2"",
  "OP "]"",
  "OP ","",
  "NAME "r"",
  "OP "["",
  "NUMBER "2"",
  "OP ":"",
  "NUMBER "4"",
  "OP "]"",
  "OP ","",
  "NAME "r"",
  "OP "["",
  "NUMBER "4"",
  "OP ":"",
  "NUMBER "6"",
  "OP "]"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "r"",
  "OP "="",
  "OP "["",
  "NAME "int"",
  "OP "("",
  "NAME "x"",
  "OP ","",
  "NUMBER "16"",
  "OP ")"",
  "NAME "for"",
  "NAME "x"",
  "NAME "in"",
  "NAME "split"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "("",
  "NAME "r"",
  "OP ","",
  "NAME "g"",
  "OP ","",
  "NAME "b"",
  "OP ")"",
  "OP "="",
  "NAME "r"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "self"",
  "OP "."",
  "NAME "r"",
  "OP "="",
  "NAME "int"",
  "OP "("",
  "NAME "r"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "Red component, 0-255"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "g"",
  "OP "="",
  "NAME "int"",
  "OP "("",
  "NAME "g"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "Green component, 0-255"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "b"",
  "OP "="",
  "NAME "int"",
  "OP "("",
  "NAME "b"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "Blue component, 0-255"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "property"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "value"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Return \`\`(r, g, b)\`\` tuple."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "r"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "g"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "b"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "value"",
  "OP "."",
  "NAME "setter"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "value"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "value"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "r"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "g"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "b"",
  "OP ")"",
  "OP "="",
  "NAME "value"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__eq__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "other"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "other"",
  "OP ","",
  "NAME "Color"",
  "OP ")"",
  "NAME "and"",
  "NAME "self"",
  "OP "."",
  "NAME "value"",
  "OP "=="",
  "NAME "other"",
  "OP "."",
  "NAME "value"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__ne__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "other"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "NAME "not"",
  "NAME "self"",
  "OP "=="",
  "NAME "other"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__iter__"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "NAME "iter"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "value"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__repr__"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "STRING "%s.%s(%s)"",
  "OP "%"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__module__"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__name__"",
  "OP ","",
  "NAME "repr"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "value"",
  "OP ")"",
  "OP "."",
  "NAME "strip"",
  "OP "("",
  "STRING "()"",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "stringify"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Returns the color value in hexcode format.\\r\\n\\r\\n        eg. \`\`'#ff1056'\`\`\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "hexcode"",
  "OP "="",
  "STRING "#"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "for"",
  "NAME "x"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "value"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "part"",
  "OP "="",
  "NAME "hex"",
  "OP "("",
  "NAME "x"",
  "OP ")"",
  "OP "["",
  "NUMBER "2"",
  "OP ":"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "len"",
  "OP "("",
  "NAME "part"",
  "OP ")"",
  "OP "<"",
  "NUMBER "2"",
  "OP ":"",
  "NAME "part"",
  "OP "="",
  "STRING "0"",
  "OP "+"",
  "NAME "part"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "hexcode"",
  "OP "+="",
  "NAME "part"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "return"",
  "NAME "hexcode"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "classmethod"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "random"",
  "OP "("",
  "NAME "cls"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "f"",
  "OP "="",
  "NAME "lambda"",
  "OP ":"",
  "NAME "random"",
  "OP "."",
  "NAME "randint"",
  "OP "("",
  "NUMBER "0"",
  "OP ","",
  "NUMBER "255"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "cls"",
  "OP "("",
  "NAME "f"",
  "OP "("",
  "OP ")"",
  "OP ","",
  "NAME "f"",
  "OP "("",
  "OP ")"",
  "OP ","",
  "NAME "f"",
  "OP "("",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "#-- BlockTypes --#"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "class"",
  "NAME "Insert"",
  "OP "("",
  "NAME "object"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "The specification for an argument to a :class:\`BlockType\`."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "SHAPE_DEFAULTS"",
  "OP "="",
  "OP "{"",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "number"",
  "OP ":"",
  "NUMBER "0"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "number-menu"",
  "OP ":"",
  "NUMBER "0"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "stack"",
  "OP ":"",
  "OP "["",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "color"",
  "OP ":"",
  "NAME "Color"",
  "OP "("",
  "STRING "#f00"",
  "OP ")"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "inline"",
  "OP ":"",
  "STRING "nil"",
  "OP ","",
  "COMMENT "# Can't be empty"",
  "NL "\\r"",
  "NL "\\n"",
  "OP "}"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "SHAPE_FMTS"",
  "OP "="",
  "OP "{"",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "number"",
  "OP ":"",
  "STRING "(%s)"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "string"",
  "OP ":"",
  "STRING "[%s]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "readonly-menu"",
  "OP ":"",
  "STRING "[%s v]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "number-menu"",
  "OP ":"",
  "STRING "(%s v)"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "color"",
  "OP ":"",
  "STRING "[%s]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "boolean"",
  "OP ":"",
  "STRING "<%s>"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "stack"",
  "OP ":"",
  "STRING "\\\\n    %s\\\\n"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "inline"",
  "OP ":"",
  "STRING "%s"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "block"",
  "OP ":"",
  "STRING "{%s}"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "OP "}"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "KIND_OPTIONS"",
  "OP "="",
  "OP "{"",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "attribute"",
  "OP ":"",
  "OP "["",
  "STRING "x position"",
  "OP ","",
  "STRING "y position"",
  "OP ","",
  "STRING "direction"",
  "OP ","",
  "STRING "costume #"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "size"",
  "OP ","",
  "STRING "volume"",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "backdrop"",
  "OP ":"",
  "OP "["",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "booleanSensor"",
  "OP ":"",
  "OP "["",
  "STRING "button pressed"",
  "OP ","",
  "STRING "A connected"",
  "OP ","",
  "STRING "B connected"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "C connected"",
  "OP ","",
  "STRING "D connected"",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "broadcast"",
  "OP ":"",
  "OP "["",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "costume"",
  "OP ":"",
  "OP "["",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "direction"",
  "OP ":"",
  "OP "["",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "drum"",
  "OP ":"",
  "NAME "range"",
  "OP "("",
  "NUMBER "1"",
  "OP ","",
  "NUMBER "18"",
  "OP ")"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "effect"",
  "OP ":"",
  "OP "["",
  "STRING "color"",
  "OP ","",
  "STRING "fisheye"",
  "OP ","",
  "STRING "whirl"",
  "OP ","",
  "STRING "pixelate"",
  "OP ","",
  "STRING "mosaic"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "brightness"",
  "OP ","",
  "STRING "ghost"",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "instrument"",
  "OP ":"",
  "NAME "range"",
  "OP "("",
  "NUMBER "1"",
  "OP ","",
  "NUMBER "21"",
  "OP ")"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "key"",
  "OP ":"",
  "OP "["",
  "STRING "0"",
  "OP ","",
  "STRING "1"",
  "OP ","",
  "STRING "2"",
  "OP ","",
  "STRING "3"",
  "OP ","",
  "STRING "4"",
  "OP ","",
  "STRING "5"",
  "OP ","",
  "STRING "6"",
  "OP ","",
  "STRING "7"",
  "OP ","",
  "STRING "8"",
  "OP ","",
  "STRING "9"",
  "OP ","",
  "STRING "a"",
  "OP ","",
  "STRING "b"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "c"",
  "OP ","",
  "STRING "d"",
  "OP ","",
  "STRING "e"",
  "OP ","",
  "STRING "f"",
  "OP ","",
  "STRING "g"",
  "OP ","",
  "STRING "h"",
  "OP ","",
  "STRING "i"",
  "OP ","",
  "STRING "j"",
  "OP ","",
  "STRING "k"",
  "OP ","",
  "STRING "l"",
  "OP ","",
  "STRING "m"",
  "OP ","",
  "STRING "n"",
  "OP ","",
  "STRING "o"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "p"",
  "OP ","",
  "STRING "q"",
  "OP ","",
  "STRING "r"",
  "OP ","",
  "STRING "s"",
  "OP ","",
  "STRING "t"",
  "OP ","",
  "STRING "u"",
  "OP ","",
  "STRING "v"",
  "OP ","",
  "STRING "w"",
  "OP ","",
  "STRING "x"",
  "OP ","",
  "STRING "y"",
  "OP ","",
  "STRING "z"",
  "OP ","",
  "STRING "space"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "left arrow"",
  "OP ","",
  "STRING "right arrow"",
  "OP ","",
  "STRING "up arrow"",
  "OP ","",
  "STRING "down arrow"",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "list"",
  "OP ":"",
  "OP "["",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "listDeleteItem"",
  "OP ":"",
  "OP "["",
  "STRING "last"",
  "OP ","",
  "STRING "all"",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "listItem"",
  "OP ":"",
  "OP "["",
  "STRING "last"",
  "OP ","",
  "STRING "random"",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "mathOp"",
  "OP ":"",
  "OP "["",
  "STRING "abs"",
  "OP ","",
  "STRING "floor"",
  "OP ","",
  "STRING "ceiling"",
  "OP ","",
  "STRING "sqrt"",
  "OP ","",
  "STRING "sin"",
  "OP ","",
  "STRING "cos"",
  "OP ","",
  "STRING "tan"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "asin"",
  "OP ","",
  "STRING "acos"",
  "OP ","",
  "STRING "atan"",
  "OP ","",
  "STRING "ln"",
  "OP ","",
  "STRING "log"",
  "OP ","",
  "STRING "e ^"",
  "OP ","",
  "STRING "10 ^"",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "motorDirection"",
  "OP ":"",
  "OP "["",
  "STRING "this way"",
  "OP ","",
  "STRING "that way"",
  "OP ","",
  "STRING "reverse"",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "note"",
  "OP ":"",
  "OP "["",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "rotationStyle"",
  "OP ":"",
  "OP "["",
  "STRING "left-right"",
  "OP ","",
  "STRING "don't rotate"",
  "OP ","",
  "STRING "all around"",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "sensor"",
  "OP ":"",
  "OP "["",
  "STRING "slider"",
  "OP ","",
  "STRING "light"",
  "OP ","",
  "STRING "sound"",
  "OP ","",
  "STRING "resistance-A"",
  "OP ","",
  "STRING "resistance-B"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "resistance-C"",
  "OP ","",
  "STRING "resistance-D"",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "sound"",
  "OP ":"",
  "OP "["",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "spriteOnly"",
  "OP ":"",
  "OP "["",
  "STRING "myself"",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "spriteOrMouse"",
  "OP ":"",
  "OP "["",
  "STRING "mouse-pointer"",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "spriteOrStage"",
  "OP ":"",
  "OP "["",
  "STRING "Stage"",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "stageOrThis"",
  "OP ":"",
  "OP "["",
  "STRING "Stage"",
  "OP "]"",
  "OP ","",
  "COMMENT "# ? TODO"",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "stop"",
  "OP ":"",
  "OP "["",
  "STRING "all"",
  "OP ","",
  "STRING "this script"",
  "OP ","",
  "STRING "other scripts in sprite"",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "timeAndDate"",
  "OP ":"",
  "OP "["",
  "STRING "year"",
  "OP ","",
  "STRING "month"",
  "OP ","",
  "STRING "date"",
  "OP ","",
  "STRING "day of week"",
  "OP ","",
  "STRING "hour"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "minute"",
  "OP ","",
  "STRING "second"",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "touching"",
  "OP ":"",
  "OP "["",
  "STRING "mouse-pointer"",
  "OP ","",
  "STRING "edge"",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "triggerSensor"",
  "OP ":"",
  "OP "["",
  "STRING "loudness"",
  "OP ","",
  "STRING "timer"",
  "OP ","",
  "STRING "video motion"",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "var"",
  "OP ":"",
  "OP "["",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "videoMotionType"",
  "OP ":"",
  "OP "["",
  "STRING "motion"",
  "OP ","",
  "STRING "direction"",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "videoState"",
  "OP ":"",
  "OP "["",
  "STRING "off"",
  "OP ","",
  "STRING "on"",
  "OP ","",
  "STRING "on-flipped"",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "OP "}"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "shape"",
  "OP ","",
  "NAME "kind"",
  "OP "="",
  "NAME "None"",
  "OP ","",
  "NAME "default"",
  "OP "="",
  "NAME "None"",
  "OP ","",
  "NAME "name"",
  "OP "="",
  "NAME "None"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "unevaluated"",
  "OP "="",
  "NAME "None"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "self"",
  "OP "."",
  "NAME "shape"",
  "OP "="",
  "NAME "shape"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "What kind of values this argument accepts.\\r\\n\\r\\n        Shapes that accept a simple data value or a reporter block:\\r\\n\\r\\n        \`\`'number'\`\`\\r\\n            An integer or float number. Defaults to \`\`0\`\`.\\r\\n\\r\\n        \`\`'string'\`\`\\r\\n            A unicode text value.\\r\\n\\r\\n        \`\`'readonly-menu'\`\`\\r\\n            A choice of string value from a menu.\\r\\n\\r\\n            Some readonly inserts do not accept reporter blocks.\\r\\n\\r\\n        \`\`'number-menu'\`\`\\r\\n            Either a number value, or a choice of special value from a menu.\\r\\n\\r\\n            Defaults to \`\`0\`\`.\\r\\n\\r\\n        \`\`'color'\`\`\\r\\n            A :class:\`Color\` value. Defaults to a random color.\\r\\n\\r\\n        Shapes that only accept blocks with the corresponding :attr:\`shape\`:\\r\\n\\r\\n        \`\`'boolean'\`\`\\r\\n            Accepts a boolean block.\\r\\n\\r\\n        \`\`'stack'\`\`\\r\\n            Accepts a list of stack blocks. Defaults to \`\`[]\`\`.\\r\\n\\r\\n            The block is rendered with a \\"mouth\\" into which blocks can be\\r\\n            inserted.\\r\\n\\r\\n        Special shapes:\\r\\n\\r\\n        \`\`'inline'\`\`\\r\\n            Not actually an insert -- used for variable and list reporters.\\r\\n\\r\\n        \`\`'block'\`\`\\r\\n            Used for the argument to the \\"define ...\\" hat block.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "kind"",
  "OP "="",
  "NAME "kind"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "Valid arguments for a \\"menu\\"-shaped insert. Default is \`\`None\`\`.\\r\\n\\r\\n        Valid values include:\\r\\n\\r\\n        * \`\`'attribute'\`\`\\r\\n        * \`\`'booleanSensor'\`\`\\r\\n        * \`\`'broadcast'\`\`\\r\\n        * \`\`'costume'\`\`\\r\\n        * \`\`'direction'\`\`\\r\\n        * \`\`'drum'\`\`\\r\\n        * \`\`'effect'\`\`\\r\\n        * \`\`'instrument'\`\`\\r\\n        * \`\`'key'\`\`\\r\\n        * \`\`'list'\`\`\\r\\n        * \`\`'listDeleteItem'\`\`\\r\\n        * \`\`'listItem'\`\`\\r\\n        * \`\`'mathOp'\`\`\\r\\n        * \`\`'motorDirection'\`\`\\r\\n        * \`\`'note'\`\`\\r\\n        * \`\`'sensor'\`\`\\r\\n        * \`\`'sound'\`\`\\r\\n        * \`\`'spriteOrMouse'\`\`\\r\\n        * \`\`'spriteOrStage'\`\`\\r\\n        * \`\`'touching'\`\`\\r\\n        * \`\`'var'\`\`\\r\\n\\r\\n        Scratch 2.0-specific:\\r\\n\\r\\n        * \`\`'backdrop'\`\`\\r\\n        * \`\`'rotationStyle'\`\`\\r\\n        * \`\`'spriteOnly'\`\`\\r\\n        * \`\`'stageOrThis'\`\`\\r\\n        * \`\`'stop'\`\`\\r\\n        * \`\`'timeAndDate'\`\`\\r\\n        * \`\`'triggerSensor'\`\`\\r\\n        * \`\`'videoMotionType'\`\`\\r\\n        * \`\`'videoState'\`\`\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "default"",
  "OP "="",
  "NAME "default"",
  "NAME "or"",
  "NAME "Insert"",
  "OP "."",
  "NAME "SHAPE_DEFAULTS"",
  "OP "."",
  "NAME "get"",
  "OP "("",
  "NAME "shape"",
  "OP ","",
  "NAME "None"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The default value for the insert."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "unevaluated"",
  "NAME "is"",
  "NAME "None"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "unevaluated"",
  "OP "="",
  "NAME "True"",
  "NAME "if"",
  "NAME "shape"",
  "OP "=="",
  "STRING "stack"",
  "NAME "else"",
  "NAME "False"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "self"",
  "OP "."",
  "NAME "unevaluated"",
  "OP "="",
  "NAME "unevaluated"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "True if the interpreter should evaluate the argument to the block.\\r\\n\\r\\n        Defaults to True for 'stack' inserts, False for all others.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "name"",
  "OP "="",
  "NAME "name"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The name of the parameter to a :class:\`CustomBlockType\`.\\r\\n\\r\\n        Not used for :class:\`BlockTypes <BlockType>\`.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__repr__"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "r"",
  "OP "="",
  "STRING "%s.%s(%r"",
  "OP "%"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__module__"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__name__"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "shape"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "kind"",
  "OP "!="",
  "NAME "None"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "r"",
  "OP "+="",
  "STRING ", %r"",
  "OP "%"",
  "NAME "self"",
  "OP "."",
  "NAME "kind"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "default"",
  "OP "!="",
  "NAME "Insert"",
  "OP "."",
  "NAME "SHAPE_DEFAULTS"",
  "OP "."",
  "NAME "get"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "shape"",
  "OP ","",
  "NAME "None"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "r"",
  "OP "+="",
  "STRING ", default=%r"",
  "OP "%"",
  "NAME "self"",
  "OP "."",
  "NAME "default"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "unevaluated"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "r"",
  "OP "+="",
  "STRING ", unevaluated=%r"",
  "OP "%"",
  "NAME "self"",
  "OP "."",
  "NAME "unevaluated"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "name"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "r"",
  "OP "+="",
  "STRING ", name=%r"",
  "OP "%"",
  "NAME "self"",
  "OP "."",
  "NAME "name"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "r"",
  "OP "+="",
  "STRING ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "r"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__eq__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "other"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "other"",
  "OP ","",
  "NAME "Insert"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "for"",
  "NAME "name"",
  "NAME "in"",
  "OP "("",
  "STRING "shape"",
  "OP ","",
  "STRING "kind"",
  "OP ","",
  "STRING "default"",
  "OP ","",
  "STRING "unevaluated"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "if"",
  "NAME "getattr"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "name"",
  "OP ")"",
  "OP "!="",
  "NAME "getattr"",
  "OP "("",
  "NAME "other"",
  "OP ","",
  "NAME "name"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "return"",
  "NAME "False"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "return"",
  "NAME "True"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "DEDENT """,
  "NAME "def"",
  "NAME "__ne__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "other"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "NAME "not"",
  "NAME "self"",
  "OP "=="",
  "NAME "other"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "copy"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "NAME "Insert"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "shape"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "kind"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "default"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "name"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "unevaluated"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "stringify"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "value"",
  "OP "="",
  "NAME "None"",
  "OP ","",
  "NAME "block_plugin"",
  "OP "="",
  "NAME "False"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "if"",
  "NAME "value"",
  "NAME "is"",
  "NAME "None"",
  "NAME "or"",
  "OP "("",
  "NAME "value"",
  "NAME "is"",
  "NAME "False"",
  "NAME "and"",
  "NAME "self"",
  "OP "."",
  "NAME "shape"",
  "OP "=="",
  "STRING "boolean"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "value"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "default"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "value"",
  "NAME "is"",
  "NAME "None"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "value"",
  "OP "="",
  "STRING """,
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "value"",
  "OP ","",
  "NAME "Block"",
  "OP ")"",
  "OP ":"",
  "COMMENT "# use block's shape"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "return"",
  "NAME "value"",
  "OP "."",
  "NAME "stringify"",
  "OP "("",
  "NAME "block_plugin"",
  "OP ","",
  "NAME "in_insert"",
  "OP "="",
  "NAME "True"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "if"",
  "NAME "hasattr"",
  "OP "("",
  "NAME "value"",
  "OP ","",
  "STRING "stringify"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "value"",
  "OP "="",
  "NAME "value"",
  "OP "."",
  "NAME "stringify"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "elif"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "value"",
  "OP ","",
  "NAME "list"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "value"",
  "OP "="",
  "STRING "\\\\n"",
  "OP "."",
  "NAME "join"",
  "OP "("",
  "NAME "block"",
  "OP "."",
  "NAME "stringify"",
  "OP "("",
  "NAME "block_plugin"",
  "OP ")"",
  "NAME "for"",
  "NAME "block"",
  "NAME "in"",
  "NAME "value"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "shape"",
  "OP "=="",
  "STRING "stack"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "value"",
  "OP "="",
  "NAME "value"",
  "OP "."",
  "NAME "replace"",
  "OP "("",
  "STRING "\\\\n"",
  "OP ","",
  "STRING "\\\\n    "",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "if"",
  "NAME "block_plugin"",
  "NAME "or"",
  "NAME "self"",
  "OP "."",
  "NAME "shape"",
  "NAME "in"",
  "STRING "stack"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "value"",
  "OP "="",
  "NAME "Insert"",
  "OP "."",
  "NAME "SHAPE_FMTS"",
  "OP "."",
  "NAME "get"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "shape"",
  "OP ","",
  "STRING "%s"",
  "OP ")"",
  "OP "%"",
  "OP "("",
  "NAME "value"",
  "OP ","",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "elif"",
  "NAME "self"",
  "OP "."",
  "NAME "shape"",
  "OP "=="",
  "STRING "string"",
  "NAME "or"",
  "NAME "self"",
  "OP "."",
  "NAME "kind"",
  "OP "=="",
  "STRING "broadcast"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "value"",
  "OP "="",
  "NAME "unicode"",
  "OP "("",
  "NAME "value"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "STRING "'"",
  "NAME "in"",
  "NAME "value"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "value"",
  "OP "="",
  "STRING "\\"%s\\""",
  "OP "%"",
  "NAME "value"",
  "OP "."",
  "NAME "replace"",
  "OP "("",
  "STRING "\\""",
  "OP ","",
  "STRING "\\\\\\\\\\""",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "value"",
  "OP "="",
  "STRING "'%s'"",
  "OP "%"",
  "NAME "value"",
  "OP "."",
  "NAME "replace"",
  "OP "("",
  "STRING "'"",
  "OP ","",
  "STRING "\\\\\\\\'"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "return"",
  "NAME "value"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "def"",
  "NAME "options"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "scriptable"",
  "OP "="",
  "NAME "None"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Return a list of valid options to a menu insert, given a\\r\\n        Scriptable for context.\\r\\n\\r\\n        Mostly complete, excepting 'attribute'.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "options"",
  "OP "="",
  "NAME "list"",
  "OP "("",
  "NAME "Insert"",
  "OP "."",
  "NAME "KIND_OPTIONS"",
  "OP "."",
  "NAME "get"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "kind"",
  "OP ","",
  "OP "["",
  "OP "]"",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "scriptable"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "kind"",
  "OP "=="",
  "STRING "var"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "options"",
  "OP "+="",
  "NAME "scriptable"",
  "OP "."",
  "NAME "variables"",
  "OP "."",
  "NAME "keys"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "options"",
  "OP "+="",
  "NAME "scriptable"",
  "OP "."",
  "NAME "project"",
  "OP "."",
  "NAME "variables"",
  "OP "."",
  "NAME "keys"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "elif"",
  "NAME "self"",
  "OP "."",
  "NAME "kind"",
  "OP "=="",
  "STRING "list"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "options"",
  "OP "+="",
  "NAME "scriptable"",
  "OP "."",
  "NAME "lists"",
  "OP "."",
  "NAME "keys"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "options"",
  "OP "+="",
  "NAME "scriptable"",
  "OP "."",
  "NAME "project"",
  "OP "."",
  "NAME "lists"",
  "OP "."",
  "NAME "keys"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "elif"",
  "NAME "self"",
  "OP "."",
  "NAME "kind"",
  "OP "=="",
  "STRING "costume"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "options"",
  "OP "+="",
  "OP "["",
  "NAME "c"",
  "OP "."",
  "NAME "name"",
  "NAME "for"",
  "NAME "c"",
  "NAME "in"",
  "NAME "scriptable"",
  "OP "."",
  "NAME "costumes"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "elif"",
  "NAME "self"",
  "OP "."",
  "NAME "kind"",
  "OP "=="",
  "STRING "backdrop"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "options"",
  "OP "+="",
  "OP "["",
  "NAME "c"",
  "OP "."",
  "NAME "name"",
  "NAME "for"",
  "NAME "c"",
  "NAME "in"",
  "NAME "scriptable"",
  "OP "."",
  "NAME "project"",
  "OP "."",
  "NAME "stage"",
  "OP "."",
  "NAME "costumes"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "elif"",
  "NAME "self"",
  "OP "."",
  "NAME "kind"",
  "OP "=="",
  "STRING "sound"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "options"",
  "OP "+="",
  "OP "["",
  "NAME "c"",
  "OP "."",
  "NAME "name"",
  "NAME "for"",
  "NAME "c"",
  "NAME "in"",
  "NAME "scriptable"",
  "OP "."",
  "NAME "sounds"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "options"",
  "OP "+="",
  "OP "["",
  "NAME "c"",
  "OP "."",
  "NAME "name"",
  "NAME "for"",
  "NAME "c"",
  "NAME "in"",
  "NAME "scriptable"",
  "OP "."",
  "NAME "project"",
  "OP "."",
  "NAME "stage"",
  "OP "."",
  "NAME "sounds"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "elif"",
  "NAME "self"",
  "OP "."",
  "NAME "kind"",
  "NAME "in"",
  "OP "("",
  "STRING "spriteOnly"",
  "OP ","",
  "STRING "spriteOrMouse"",
  "OP ","",
  "STRING "spriteOrStage"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "touching"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "options"",
  "OP "+="",
  "OP "["",
  "NAME "s"",
  "OP "."",
  "NAME "name"",
  "NAME "for"",
  "NAME "s"",
  "NAME "in"",
  "NAME "scriptable"",
  "OP "."",
  "NAME "project"",
  "OP "."",
  "NAME "sprites"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "elif"",
  "NAME "self"",
  "OP "."",
  "NAME "kind"",
  "OP "=="",
  "STRING "attribute"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "pass"",
  "COMMENT "# TODO"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "elif"",
  "NAME "self"",
  "OP "."",
  "NAME "kind"",
  "OP "=="",
  "STRING "broadcast"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "options"",
  "OP "+="",
  "NAME "list"",
  "OP "("",
  "NAME "set"",
  "OP "("",
  "NAME "scriptable"",
  "OP "."",
  "NAME "project"",
  "OP "."",
  "NAME "get_broadcasts"",
  "OP "("",
  "OP ")"",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "return"",
  "NAME "options"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "class"",
  "NAME "BaseBlockType"",
  "OP "("",
  "NAME "object"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "Base for :class:\`BlockType\` and :class:\`PluginBlockType\`.\\r\\n\\r\\n    Defines common attributes.\\r\\n\\r\\n    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "SHAPE_FMTS"",
  "OP "="",
  "OP "{"",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "reporter"",
  "OP ":"",
  "STRING "(%s)"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "boolean"",
  "OP ":"",
  "STRING "<%s>"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "OP "}"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "shape"",
  "OP ","",
  "NAME "parts"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "self"",
  "OP "."",
  "NAME "shape"",
  "OP "="",
  "NAME "shape"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The shape of the block. Valid values:\\r\\n\\r\\n        \`\`'stack'\`\`\\r\\n            The default. Can connect to blocks above and below. Appear\\r\\n            jigsaw-shaped.\\r\\n\\r\\n        \`\`'cap'\`\`\\r\\n            Stops the script executing after this block. No blocks can be\\r\\n            connected below them.\\r\\n\\r\\n        \`\`'hat'\`\`\\r\\n            A block that starts a script, such as by responding to an event.\\r\\n            Can connect to blocks below.\\r\\n\\r\\n        \`\`'reporter'\`\`\\r\\n            Return a value. Can be placed into insert slots of other blocks as\\r\\n            an argument to that block. Appear rounded.\\r\\n\\r\\n        \`\`'boolean'\`\`\\r\\n            Like reporter blocks, but return a true/false value. Appear\\r\\n            hexagonal.\\r\\n\\r\\n        \\"C\\"-shaped blocks with \\"mouths\\" for stack blocks, such as \`\`\\"doIf\\"\`\`,\\r\\n        are specified by adding \`\`Insert('stack')\`\` to the end of\\r\\n        :attr:\`parts\`.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "parts"",
  "OP "="",
  "NAME "parts"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "A list describing the text and arguments of the block.\\r\\n\\r\\n        Contains strings, which are part of the text displayed on the block,\\r\\n        and :class:\`Insert\` instances, which are arguments to the block.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "property"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "text"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "The text displayed on the block.\\r\\n\\r\\n        String containing \`\`\\"%s\\"\`\` in place of inserts.\\r\\n\\r\\n        eg. \`\`'say %s for %s secs'\`\`\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "parts"",
  "OP "="",
  "OP "["",
  "OP "("",
  "STRING "%s"",
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "p"",
  "OP ","",
  "NAME "Insert"",
  "OP ")"",
  "NAME "else"",
  "NAME "p"",
  "OP ")"",
  "NAME "for"",
  "NAME "p"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "parts"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "parts"",
  "OP "="",
  "OP "["",
  "OP "("",
  "STRING "%%"",
  "NAME "if"",
  "NAME "p"",
  "OP "=="",
  "STRING "%"",
  "NAME "else"",
  "NAME "p"",
  "OP ")"",
  "NAME "for"",
  "NAME "p"",
  "NAME "in"",
  "NAME "parts"",
  "OP "]"",
  "COMMENT "# escape percent"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "STRING """,
  "OP "."",
  "NAME "join"",
  "OP "("",
  "NAME "parts"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "property"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "inserts"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "The type of each argument to the block.\\r\\n\\r\\n        List of :class:\`Insert\` instances.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "OP "["",
  "NAME "p"",
  "NAME "for"",
  "NAME "p"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "parts"",
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "p"",
  "OP ","",
  "NAME "Insert"",
  "OP ")"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "property"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "defaults"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Default values for block inserts. (See :attr:\`Block.args\`.)"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "OP "["",
  "NAME "i"",
  "OP "."",
  "NAME "default"",
  "NAME "for"",
  "NAME "i"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "inserts"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "property"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "stripped_text"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "The :attr:\`text\`, with spaces and inserts removed.\\r\\n\\r\\n        Used by :class:\`BlockType.get\` to look up blocks.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "BaseBlockType"",
  "OP "."",
  "NAME "_strip_text"",
  "OP "("",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "text"",
  "OP "%"",
  "NAME "tuple"",
  "OP "("",
  "OP "("",
  "NAME "i"",
  "OP "."",
  "NAME "default"",
  "NAME "if"",
  "NAME "i"",
  "OP "."",
  "NAME "shape"",
  "OP "=="",
  "STRING "inline"",
  "NAME "else"",
  "STRING "%s"",
  "OP ")"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "for"",
  "NAME "i"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "inserts"",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "staticmethod"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "_strip_text"",
  "OP "("",
  "NAME "text"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Returns text with spaces and inserts removed."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "text"",
  "OP "="",
  "NAME "re"",
  "OP "."",
  "NAME "sub"",
  "OP "("",
  "NAME "r"",
  "STRING "[ ,?:]|%s"",
  "OP ","",
  "STRING """,
  "OP ","",
  "NAME "text"",
  "OP "."",
  "NAME "lower"",
  "OP "("",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "for"",
  "NAME "chr"",
  "NAME "in"",
  "STRING "-%"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "new_text"",
  "OP "="",
  "NAME "text"",
  "OP "."",
  "NAME "replace"",
  "OP "("",
  "NAME "chr"",
  "OP ","",
  "STRING """,
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "new_text"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "text"",
  "OP "="",
  "NAME "new_text"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "return"",
  "NAME "text"",
  "OP "."",
  "NAME "lower"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__repr__"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "STRING "<%s.%s(%r shape=%r)>"",
  "OP "%"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__module__"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__name__"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "text"",
  "OP "%"",
  "NAME "tuple"",
  "OP "("",
  "NAME "i"",
  "OP "."",
  "NAME "stringify"",
  "OP "("",
  "NAME "None"",
  "OP ")"",
  "NAME "for"",
  "NAME "i"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "inserts"",
  "OP ")"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "shape"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "stringify"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "args"",
  "OP "="",
  "NAME "None"",
  "OP ","",
  "NAME "block_plugin"",
  "OP "="",
  "NAME "False"",
  "OP ","",
  "NAME "in_insert"",
  "OP "="",
  "NAME "False"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "if"",
  "NAME "args"",
  "NAME "is"",
  "NAME "None"",
  "OP ":"",
  "NAME "args"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "defaults"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "args"",
  "OP "="",
  "NAME "list"",
  "OP "("",
  "NAME "args"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "r"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "text"",
  "OP "%"",
  "NAME "tuple"",
  "OP "("",
  "NAME "i"",
  "OP "."",
  "NAME "stringify"",
  "OP "("",
  "NAME "args"",
  "OP "."",
  "NAME "pop"",
  "OP "("",
  "NUMBER "0"",
  "OP ")"",
  "OP ","",
  "NAME "block_plugin"",
  "OP ")"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "for"",
  "NAME "i"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "inserts"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "for"",
  "NAME "insert"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "inserts"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "if"",
  "NAME "insert"",
  "OP "."",
  "NAME "shape"",
  "OP "=="",
  "STRING "stack"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "return"",
  "NAME "r"",
  "OP "+"",
  "STRING "end"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "fmt"",
  "OP "="",
  "NAME "BaseBlockType"",
  "OP "."",
  "NAME "SHAPE_FMTS"",
  "OP "."",
  "NAME "get"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "shape"",
  "OP ","",
  "STRING "%s"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "not"",
  "NAME "block_plugin"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "fmt"",
  "OP "="",
  "STRING "%s"",
  "NAME "if"",
  "NAME "fmt"",
  "OP "=="",
  "STRING "%s"",
  "NAME "else"",
  "STRING "(%s)"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "if"",
  "NAME "in_insert"",
  "NAME "and"",
  "NAME "fmt"",
  "OP "=="",
  "STRING "%s"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "fmt"",
  "OP "="",
  "STRING "{%s}"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "return"",
  "NAME "fmt"",
  "OP "%"",
  "NAME "r"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "has_insert"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "shape"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Returns True if any of the inserts have the given shape."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "for"",
  "NAME "insert"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "inserts"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "if"",
  "NAME "insert"",
  "OP "."",
  "NAME "shape"",
  "OP "=="",
  "NAME "shape"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "return"",
  "NAME "True"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "return"",
  "NAME "False"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "class"",
  "NAME "BlockType"",
  "OP "("",
  "NAME "BaseBlockType"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "The specification for a type of :class:\`Block\`.\\r\\n\\r\\n    These are initialiased by :class:\`Kurt\` by combining\\r\\n    :class:\`PluginBlockType\` objects from individual format plugins to\\r\\n    create a single :class:\`BlockType\` for each command.\\r\\n\\r\\n    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "__getstate__"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "lambda functions are not pickleable so drop them."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "copy"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "__dict__"",
  "OP "."",
  "NAME "copy"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "copy"",
  "OP "["",
  "STRING "_workaround"",
  "OP "]"",
  "OP "="",
  "NAME "None"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "copy"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "pbt"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "pbt"",
  "OP ","",
  "NAME "basestring"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "raise"",
  "NAME "ValueError"",
  "OP "("",
  "STRING "Invalid argument. Did you mean \`BlockType.get\`?"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "self"",
  "OP "."",
  "NAME "_plugins"",
  "OP "="",
  "NAME "OrderedDict"",
  "OP "("",
  "OP "["",
  "OP "("",
  "NAME "pbt"",
  "OP "."",
  "NAME "format"",
  "OP ","",
  "NAME "pbt"",
  "OP ")"",
  "OP "]"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "Stores :class:\`PluginBlockType\` objects for each plugin name."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "_workaround"",
  "OP "="",
  "NAME "None"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "_add_conversion"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "plugin"",
  "OP ","",
  "NAME "pbt"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Add a new PluginBlockType conversion.\\r\\n\\r\\n        If the plugin already exists, do nothing.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "assert"",
  "NAME "self"",
  "OP "."",
  "NAME "shape"",
  "OP "=="",
  "NAME "pbt"",
  "OP "."",
  "NAME "shape"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "assert"",
  "NAME "len"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "inserts"",
  "OP ")"",
  "OP "=="",
  "NAME "len"",
  "OP "("",
  "NAME "pbt"",
  "OP "."",
  "NAME "inserts"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "for"",
  "OP "("",
  "NAME "i"",
  "OP ","",
  "NAME "o"",
  "OP ")"",
  "NAME "in"",
  "NAME "zip"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "inserts"",
  "OP ","",
  "NAME "pbt"",
  "OP "."",
  "NAME "inserts"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "assert"",
  "NAME "i"",
  "OP "."",
  "NAME "shape"",
  "OP "=="",
  "NAME "o"",
  "OP "."",
  "NAME "shape"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "assert"",
  "NAME "i"",
  "OP "."",
  "NAME "kind"",
  "OP "=="",
  "NAME "o"",
  "OP "."",
  "NAME "kind"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "assert"",
  "NAME "i"",
  "OP "."",
  "NAME "unevaluated"",
  "OP "=="",
  "NAME "o"",
  "OP "."",
  "NAME "unevaluated"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "if"",
  "NAME "plugin"",
  "NAME "not"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "_plugins"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "self"",
  "OP "."",
  "NAME "_plugins"",
  "OP "["",
  "NAME "plugin"",
  "OP "]"",
  "OP "="",
  "NAME "pbt"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "def"",
  "NAME "convert"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "plugin"",
  "OP "="",
  "NAME "None"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Return a :class:\`PluginBlockType\` for the given plugin name.\\r\\n\\r\\n        If plugin is \`\`None\`\`, return the first registered plugin.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "plugin"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "plugin"",
  "OP "="",
  "NAME "kurt"",
  "OP "."",
  "NAME "plugin"",
  "OP "."",
  "NAME "Kurt"",
  "OP "."",
  "NAME "get_plugin"",
  "OP "("",
  "NAME "plugin"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "plugin"",
  "OP "."",
  "NAME "name"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "_plugins"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "_plugins"",
  "OP "["",
  "NAME "plugin"",
  "OP "."",
  "NAME "name"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "err"",
  "OP "="",
  "NAME "BlockNotSupported"",
  "OP "("",
  "STRING "%s doesn't have %r"",
  "OP "%"",
  "NL "\\r"",
  "NL "\\n"",
  "OP "("",
  "NAME "plugin"",
  "OP "."",
  "NAME "display_name"",
  "OP ","",
  "NAME "self"",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "err"",
  "OP "."",
  "NAME "block_type"",
  "OP "="",
  "NAME "self"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "raise"",
  "NAME "err"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "conversions"",
  "OP "["",
  "NUMBER "0"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "OP "@"",
  "NAME "property"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "conversions"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Return the list of :class:\`PluginBlockType\` instances."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "_plugins"",
  "OP "."",
  "NAME "values"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "has_conversion"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "plugin"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Return True if the plugin supports this block."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "plugin"",
  "OP "="",
  "NAME "kurt"",
  "OP "."",
  "NAME "plugin"",
  "OP "."",
  "NAME "Kurt"",
  "OP "."",
  "NAME "get_plugin"",
  "OP "("",
  "NAME "plugin"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "plugin"",
  "OP "."",
  "NAME "name"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "_plugins"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "has_command"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "command"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Returns True if any of the plugins have the given command."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "for"",
  "NAME "pbt"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "_plugins"",
  "OP "."",
  "NAME "values"",
  "OP "("",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "if"",
  "NAME "pbt"",
  "OP "."",
  "NAME "command"",
  "OP "=="",
  "NAME "command"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "return"",
  "NAME "True"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "return"",
  "NAME "False"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "property"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "shape"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "convert"",
  "OP "("",
  "OP ")"",
  "OP "."",
  "NAME "shape"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "property"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "parts"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "convert"",
  "OP "("",
  "OP ")"",
  "OP "."",
  "NAME "parts"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "classmethod"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "get"",
  "OP "("",
  "NAME "cls"",
  "OP ","",
  "NAME "block_type"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Return a :class:\`BlockType\` instance from the given parameter.\\r\\n\\r\\n        * If it's already a BlockType instance, return that.\\r\\n\\r\\n        * If it exactly matches the command on a :class:\`PluginBlockType\`,\\r\\n          return the corresponding BlockType.\\r\\n\\r\\n        * If it loosely matches the text on a PluginBlockType, return the\\r\\n          corresponding BlockType.\\r\\n\\r\\n        * If it's a PluginBlockType instance, look for and return the\\r\\n          corresponding BlockType.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "block_type"",
  "OP ","",
  "OP "("",
  "NAME "BlockType"",
  "OP ","",
  "NAME "CustomBlockType"",
  "OP ")"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "return"",
  "NAME "block_type"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "block_type"",
  "OP ","",
  "NAME "PluginBlockType"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "block_type"",
  "OP "="",
  "NAME "block_type"",
  "OP "."",
  "NAME "command"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "block"",
  "OP "="",
  "NAME "kurt"",
  "OP "."",
  "NAME "plugin"",
  "OP "."",
  "NAME "Kurt"",
  "OP "."",
  "NAME "block_by_command"",
  "OP "("",
  "NAME "block_type"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "block"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "return"",
  "NAME "block"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "blocks"",
  "OP "="",
  "NAME "kurt"",
  "OP "."",
  "NAME "plugin"",
  "OP "."",
  "NAME "Kurt"",
  "OP "."",
  "NAME "blocks_by_text"",
  "OP "("",
  "NAME "block_type"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "for"",
  "NAME "block"",
  "NAME "in"",
  "NAME "blocks"",
  "OP ":"",
  "COMMENT "# check the blocks' commands map to unique blocks"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "if"",
  "NAME "kurt"",
  "OP "."",
  "NAME "plugin"",
  "OP "."",
  "NAME "Kurt"",
  "OP "."",
  "NAME "block_by_command"",
  "OP "("",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "block"",
  "OP "."",
  "NAME "convert"",
  "OP "("",
  "OP ")"",
  "OP "."",
  "NAME "command"",
  "OP ")"",
  "OP "!="",
  "NAME "blocks"",
  "OP "["",
  "NUMBER "0"",
  "OP "]"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "raise"",
  "NAME "ValueError"",
  "OP "("",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "ambigious block text %r, use one of %r instead"",
  "OP "%"",
  "NL "\\r"",
  "NL "\\n"",
  "OP "("",
  "NAME "block_type"",
  "OP ","",
  "OP "["",
  "NAME "b"",
  "OP "."",
  "NAME "convert"",
  "OP "("",
  "OP ")"",
  "OP "."",
  "NAME "command"",
  "NAME "for"",
  "NAME "b"",
  "NAME "in"",
  "NAME "blocks"",
  "OP "]"",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "if"",
  "NAME "blocks"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "return"",
  "NAME "blocks"",
  "OP "["",
  "NUMBER "0"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "raise"",
  "NAME "UnknownBlock"",
  "OP ","",
  "NAME "repr"",
  "OP "("",
  "NAME "block_type"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__eq__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "other"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "other"",
  "OP ","",
  "NAME "BlockType"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "shape"",
  "OP "=="",
  "NAME "other"",
  "OP "."",
  "NAME "shape"",
  "NAME "and"",
  "NAME "self"",
  "OP "."",
  "NAME "inserts"",
  "OP "=="",
  "NAME "other"",
  "OP "."",
  "NAME "inserts"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "for"",
  "NAME "plugin"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "_plugins"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "if"",
  "NAME "plugin"",
  "NAME "in"",
  "NAME "other"",
  "OP "."",
  "NAME "_plugins"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                        "",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "_plugins"",
  "OP "["",
  "NAME "plugin"",
  "OP "]"",
  "OP "=="",
  "NAME "other"",
  "OP "."",
  "NAME "_plugins"",
  "OP "["",
  "NAME "plugin"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "DEDENT """,
  "DEDENT """,
  "NAME "return"",
  "NAME "False"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__ne__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "other"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "NAME "not"",
  "NAME "self"",
  "OP "=="",
  "NAME "other"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "_add_workaround"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "workaround"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "self"",
  "OP "."",
  "NAME "_workaround"",
  "OP "="",
  "NAME "workaround"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "class"",
  "NAME "PluginBlockType"",
  "OP "("",
  "NAME "BaseBlockType"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "Holds plugin-specific :class:\`BlockType\` attributes.\\r\\n\\r\\n    For each block concept, :class:\`Kurt\` builds a single BlockType that\\r\\n    references a corresponding PluginBlockType for each plugin that\\r\\n    supports that block.\\r\\n\\r\\n    Note that whichever plugin is loaded first takes precedence.\\r\\n\\r\\n    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "category"",
  "OP ","",
  "NAME "shape"",
  "OP ","",
  "NAME "command"",
  "OP ","",
  "NAME "parts"",
  "OP ","",
  "NAME "match"",
  "OP "="",
  "NAME "None"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "BaseBlockType"",
  "OP "."",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "shape"",
  "OP ","",
  "NAME "parts"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "format"",
  "OP "="",
  "NAME "None"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The format plugin the block belongs to."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "command"",
  "OP "="",
  "NAME "command"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The method name from the source code, used to identify the block.\\r\\n\\r\\n        eg. \`\`'say:duration:elapsed:from:'\`\`\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "category"",
  "OP "="",
  "NAME "category"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "Where the block is found in the interface.\\r\\n\\r\\n        The same blocks may have different categories in different formats.\\r\\n\\r\\n        Possible values include::\\r\\n\\r\\n            'motion', 'looks', 'sound', 'pen', 'control', 'events', 'sensing',\\r\\n            'operators', 'data', 'variables', 'list', 'more blocks', 'motor',\\r\\n            'sensor', 'wedo', 'midi', 'obsolete'\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "_match"",
  "OP "="",
  "NAME "match"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "String -- equivalent command from other plugin.\\r\\n\\r\\n        The plugin containing the command to match against must have been\\r\\n        registered first.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "copy"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "category"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "shape"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "command"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "parts"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "_match"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__eq__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "other"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "other"",
  "OP ","",
  "NAME "BlockType"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "shape"",
  "OP "=="",
  "NAME "other"",
  "OP "."",
  "NAME "shape"",
  "NAME "and"",
  "NAME "self"",
  "OP "."",
  "NAME "inserts"",
  "OP "=="",
  "NAME "other"",
  "OP "."",
  "NAME "inserts"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "for"",
  "NAME "t"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "_plugins"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "if"",
  "NAME "t"",
  "NAME "in"",
  "NAME "other"",
  "OP "."",
  "NAME "_plugins"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                        "",
  "NAME "return"",
  "NAME "True"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "DEDENT """,
  "DEDENT """,
  "NAME "elif"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "other"",
  "OP ","",
  "NAME "PluginBlockType"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "for"",
  "NAME "name"",
  "NAME "in"",
  "OP "("",
  "STRING "shape"",
  "OP ","",
  "STRING "inserts"",
  "OP ","",
  "STRING "command"",
  "OP ","",
  "STRING "format"",
  "OP ","",
  "STRING "category"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                 "",
  "NAME "if"",
  "NAME "getattr"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "name"",
  "OP ")"",
  "OP "!="",
  "NAME "getattr"",
  "OP "("",
  "NAME "other"",
  "OP ","",
  "NAME "name"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "return"",
  "NAME "False"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "return"",
  "NAME "True"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "return"",
  "NAME "False"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "class"",
  "NAME "CustomBlockType"",
  "OP "("",
  "NAME "BaseBlockType"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "A user-specified :class:\`BlockType\`.\\r\\n\\r\\n    The script defining the custom block starts with::\\r\\n\\r\\n        kurt.Block(\\"procDef\\", <CustomBlockType>)\\r\\n\\r\\n    And the scripts definining the block follow.\\r\\n\\r\\n    The same CustomBlockType instance can then be used in a block in another\\r\\n    script::\\r\\n\\r\\n        kurt.Block(<CustomBlocktype>, [args ...,])\\r\\n\\r\\n    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "shape"",
  "OP ","",
  "NAME "parts"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "BaseBlockType"",
  "OP "."",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "shape"",
  "OP ","",
  "NAME "parts"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "is_atomic"",
  "OP "="",
  "NAME "False"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "True if the block should run without screen refresh."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "#-- Scripts --#"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "class"",
  "NAME "Block"",
  "OP "("",
  "NAME "object"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "A statement in a graphical programming language. Blocks can connect\\r\\n    together to form sequences of commands, which are stored in a\\r\\n    :class:\`Script\`. Blocks perform different commands depending on their\\r\\n    type.\\r\\n\\r\\n    :param type:      A :class:\`BlockType\` instance, used to identify the\\r\\n                      command the block performs.\\r\\n                      Will also exact match a :attr:\`command\` or loosely match\\r\\n                      :attr:\`text\`.\\r\\n\\r\\n    :param \`\`*args\`\`: List of the block's arguments. Arguments can be numbers,\\r\\n                      strings, Blocks, or lists of Blocks (for 'stack' shaped\\r\\n                      Inserts).\\r\\n\\r\\n    The following constructors are all equivalent::\\r\\n\\r\\n        >>> block = kurt.Block('say:duration:elapsed:from:', 'Hello!', 2)\\r\\n        >>> block = kurt.Block('say %s for %s secs', 'Hello!', 2)\\r\\n        >>> block = kurt.Block('sayforsecs', 'Hello!', 2)\\r\\n\\r\\n    Using BlockType::\\r\\n\\r\\n        >>> block.type\\r\\n        <kurt.BlockType('say [Hello!] for (2) secs', 'stack')>\\r\\n        >>> block.args\\r\\n        ['Hello!', 2]\\r\\n        >>> block2 = kurt.Block(block.type, 'Goodbye!', 5)\\r\\n        >>> block.stringify()\\r\\n        'say [Hello!] for (2) secs'\\r\\n        >>> block2.stringify()\\r\\n        'say [Goodbye!] for (5) secs'\\r\\n\\r\\n    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "block_type"",
  "OP ","",
  "OP "*"",
  "NAME "args"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "self"",
  "OP "."",
  "NAME "type"",
  "OP "="",
  "NAME "BlockType"",
  "OP "."",
  "NAME "get"",
  "OP "("",
  "NAME "block_type"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING ":class:\`BlockType\` instance. The command this block performs."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "args"",
  "OP "="",
  "OP "["",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "List of arguments to the block.\\r\\n\\r\\n        The block's parameters are found in :attr:\`type.inserts\\r\\n        <BlockType.inserts>\`. Default values come from :attr:\`type.defaults\\r\\n        <BlockType.defaults\`.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "comment"",
  "OP "="",
  "STRING """,
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The text of the comment attached to the block. Empty if no comment\\r\\n        is attached.\\r\\n\\r\\n        Comments can only be attached to stack blocks.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "type"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "self"",
  "OP "."",
  "NAME "args"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "type"",
  "OP "."",
  "NAME "defaults"",
  "OP "["",
  "OP ":"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "for"",
  "NAME "i"",
  "NAME "in"",
  "NAME "xrange"",
  "OP "("",
  "NAME "len"",
  "OP "("",
  "NAME "args"",
  "OP ")"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "if"",
  "NAME "i"",
  "OP "<"",
  "NAME "len"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "args"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "self"",
  "OP "."",
  "NAME "args"",
  "OP "["",
  "NAME "i"",
  "OP "]"",
  "OP "="",
  "NAME "args"",
  "OP "["",
  "NAME "i"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "self"",
  "OP "."",
  "NAME "args"",
  "OP "."",
  "NAME "append"",
  "OP "("",
  "NAME "args"",
  "OP "["",
  "NAME "i"",
  "OP "]"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "self"",
  "OP "."",
  "NAME "_normalize"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "_normalize"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "self"",
  "OP "."",
  "NAME "type"",
  "OP "="",
  "NAME "BlockType"",
  "OP "."",
  "NAME "get"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "type"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "inserts"",
  "OP "="",
  "NAME "list"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "type"",
  "OP "."",
  "NAME "inserts"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "args"",
  "OP "="",
  "OP "["",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "for"",
  "NAME "arg"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "args"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "insert"",
  "OP "="",
  "NAME "inserts"",
  "OP "."",
  "NAME "pop"",
  "OP "("",
  "NUMBER "0"",
  "OP ")"",
  "NAME "if"",
  "NAME "inserts"",
  "NAME "else"",
  "NAME "None"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "insert"",
  "NAME "and"",
  "NAME "insert"",
  "OP "."",
  "NAME "shape"",
  "NAME "in"",
  "OP "("",
  "STRING "number"",
  "OP ","",
  "STRING "number-menu"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "arg"",
  "OP ","",
  "NAME "basestring"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "try"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                        "",
  "NAME "arg"",
  "OP "="",
  "NAME "float"",
  "OP "("",
  "NAME "arg"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "arg"",
  "OP "="",
  "NAME "int"",
  "OP "("",
  "NAME "arg"",
  "OP ")"",
  "NAME "if"",
  "NAME "int"",
  "OP "("",
  "NAME "arg"",
  "OP ")"",
  "OP "=="",
  "NAME "arg"",
  "NAME "else"",
  "NAME "arg"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "except"",
  "NAME "ValueError"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                        "",
  "NAME "pass"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "DEDENT """,
  "NAME "args"",
  "OP "."",
  "NAME "append"",
  "OP "("",
  "NAME "arg"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "self"",
  "OP "."",
  "NAME "args"",
  "OP "="",
  "NAME "args"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "comment"",
  "OP "="",
  "NAME "unicode"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "comment"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "copy"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Return a new Block instance with the same attributes."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "args"",
  "OP "="",
  "OP "["",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "for"",
  "NAME "arg"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "args"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "arg"",
  "OP ","",
  "NAME "Block"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "arg"",
  "OP "="",
  "NAME "arg"",
  "OP "."",
  "NAME "copy"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "elif"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "arg"",
  "OP ","",
  "NAME "list"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "arg"",
  "OP "="",
  "OP "["",
  "NAME "b"",
  "OP "."",
  "NAME "copy"",
  "OP "("",
  "OP ")"",
  "NAME "for"",
  "NAME "b"",
  "NAME "in"",
  "NAME "arg"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "args"",
  "OP "."",
  "NAME "append"",
  "OP "("",
  "NAME "arg"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "return"",
  "NAME "Block"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "type"",
  "OP ","",
  "OP "*"",
  "NAME "args"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__eq__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "other"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "OP "("",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "other"",
  "OP ","",
  "NAME "Block"",
  "OP ")"",
  "NAME "and"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "type"",
  "OP "=="",
  "NAME "other"",
  "OP "."",
  "NAME "type"",
  "NAME "and"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "args"",
  "OP "=="",
  "NAME "other"",
  "OP "."",
  "NAME "args"",
  "NL "\\r"",
  "NL "\\n"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__ne__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "other"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "NAME "not"",
  "NAME "self"",
  "OP "=="",
  "NAME "other"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__repr__"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "string"",
  "OP "="",
  "STRING "%s.%s(%s, "",
  "OP "%"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__module__"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__name__"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "repr"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "type"",
  "OP "."",
  "NAME "convert"",
  "OP "("",
  "OP ")"",
  "OP "."",
  "NAME "command"",
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "type"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "BlockType"",
  "OP ")"",
  "NAME "else"",
  "NAME "self"",
  "OP "."",
  "NAME "type"",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "for"",
  "NAME "arg"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "args"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "arg"",
  "OP ","",
  "NAME "Block"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "string"",
  "OP "="",
  "NAME "string"",
  "OP "."",
  "NAME "rstrip"",
  "OP "("",
  "STRING "\\\\n"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "string"",
  "OP "+="",
  "STRING "\\\\n    %s,\\\\n"",
  "OP "%"",
  "NAME "repr"",
  "OP "("",
  "NAME "arg"",
  "OP ")"",
  "OP "."",
  "NAME "replace"",
  "OP "("",
  "STRING "\\\\n"",
  "OP ","",
  "STRING "\\\\n    "",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "elif"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "arg"",
  "OP ","",
  "NAME "list"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "if"",
  "NAME "string"",
  "OP "."",
  "NAME "endswith"",
  "OP "("",
  "STRING "\\\\n"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "string"",
  "OP "+="",
  "STRING "    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "string"",
  "OP "+="",
  "STRING " "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "string"",
  "OP "+="",
  "STRING "[\\\\n"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "for"",
  "NAME "block"",
  "NAME "in"",
  "NAME "arg"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                    "",
  "NAME "string"",
  "OP "+="",
  "STRING "    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "string"",
  "OP "+="",
  "NAME "repr"",
  "OP "("",
  "NAME "block"",
  "OP ")"",
  "OP "."",
  "NAME "replace"",
  "OP "("",
  "STRING "\\\\n"",
  "OP ","",
  "STRING "\\\\n    "",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "string"",
  "OP "+="",
  "STRING ",\\\\n"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "string"",
  "OP "+="",
  "STRING "    ], "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "string"",
  "OP "+="",
  "NAME "repr"",
  "OP "("",
  "NAME "arg"",
  "OP ")"",
  "OP "+"",
  "STRING ", "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "string"",
  "OP "="",
  "NAME "string"",
  "OP "."",
  "NAME "rstrip"",
  "OP "("",
  "STRING " "",
  "OP ")"",
  "OP "."",
  "NAME "rstrip"",
  "OP "("",
  "STRING ","",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "string"",
  "OP "+"",
  "STRING ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "stringify"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "block_plugin"",
  "OP "="",
  "NAME "False"",
  "OP ","",
  "NAME "in_insert"",
  "OP "="",
  "NAME "False"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "s"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "type"",
  "OP "."",
  "NAME "stringify"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "args"",
  "OP ","",
  "NAME "block_plugin"",
  "OP ","",
  "NAME "in_insert"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "comment"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "i"",
  "OP "="",
  "NAME "s"",
  "OP "."",
  "NAME "index"",
  "OP "("",
  "STRING "\\\\n"",
  "OP ")"",
  "NAME "if"",
  "STRING "\\\\n"",
  "NAME "in"",
  "NAME "s"",
  "NAME "else"",
  "NAME "len"",
  "OP "("",
  "NAME "s"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "indent"",
  "OP "="",
  "STRING "\\\\n"",
  "OP "+"",
  "STRING " "",
  "OP "*"",
  "NAME "i"",
  "OP "+"",
  "STRING " // "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "comment"",
  "OP "="",
  "STRING " // "",
  "OP "+"",
  "NAME "self"",
  "OP "."",
  "NAME "comment"",
  "OP "."",
  "NAME "replace"",
  "OP "("",
  "STRING "\\\\n"",
  "OP ","",
  "NAME "indent"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "s"",
  "OP "="",
  "NAME "s"",
  "OP "["",
  "OP ":"",
  "NAME "i"",
  "OP "]"",
  "OP "+"",
  "NAME "comment"",
  "OP "+"",
  "NAME "s"",
  "OP "["",
  "NAME "i"",
  "OP ":"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "return"",
  "NAME "s"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "class"",
  "NAME "Script"",
  "OP "("",
  "NAME "object"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "A single sequence of blocks. Each :class:\`Scriptable\` can have many\\r\\n    Scripts.\\r\\n\\r\\n    The first block, \`\`self.blocks[0]\`\` is usually a \\"when\\" block, eg. an\\r\\n    EventHatMorph.\\r\\n\\r\\n    Scripts implement the \`\`list\`\` interface, so can be indexed directly, eg.\\r\\n    \`\`script[0]\`\`. All other methods like \`\`append\`\` also work.\\r\\n\\r\\n    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "blocks"",
  "OP "="",
  "NAME "None"",
  "OP ","",
  "NAME "pos"",
  "OP "="",
  "NAME "None"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "self"",
  "OP "."",
  "NAME "blocks"",
  "OP "="",
  "NAME "blocks"",
  "NAME "or"",
  "OP "["",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "blocks"",
  "OP "="",
  "NAME "list"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "blocks"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The list of :class:\`Blocks <Block>\`."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "pos"",
  "OP "="",
  "NAME "tuple"",
  "OP "("",
  "NAME "pos"",
  "OP ")"",
  "NAME "if"",
  "NAME "pos"",
  "NAME "else"",
  "NAME "None"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "\`\`(x, y)\`\` position from the top-left of the script area in\\r\\n        pixels.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "_normalize"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "self"",
  "OP "."",
  "NAME "pos"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "pos"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "blocks"",
  "OP "="",
  "NAME "list"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "blocks"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "for"",
  "NAME "block"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "blocks"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "block"",
  "OP "."",
  "NAME "_normalize"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "def"",
  "NAME "copy"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Return a new instance with the same attributes."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "("",
  "OP "["",
  "NAME "b"",
  "OP "."",
  "NAME "copy"",
  "OP "("",
  "OP ")"",
  "NAME "for"",
  "NAME "b"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "blocks"",
  "OP "]"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "tuple"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "pos"",
  "OP ")"",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "pos"",
  "NAME "else"",
  "NAME "None"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__eq__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "other"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "OP "("",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "other"",
  "OP ","",
  "NAME "Script"",
  "OP ")"",
  "NAME "and"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "blocks"",
  "OP "=="",
  "NAME "other"",
  "OP "."",
  "NAME "blocks"",
  "NL "\\r"",
  "NL "\\n"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__ne__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "other"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "NAME "not"",
  "NAME "self"",
  "OP "=="",
  "NAME "other"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__repr__"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "r"",
  "OP "="",
  "STRING "%s.%s([\\\\n"",
  "OP "%"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__module__"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__name__"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "for"",
  "NAME "block"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "blocks"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "r"",
  "OP "+="",
  "STRING "    "",
  "OP "+"",
  "NAME "repr"",
  "OP "("",
  "NAME "block"",
  "OP ")"",
  "OP "."",
  "NAME "replace"",
  "OP "("",
  "STRING "\\\\n"",
  "OP ","",
  "STRING "\\\\n    "",
  "OP ")"",
  "OP "+"",
  "STRING ",\\\\n"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "r"",
  "OP "="",
  "NAME "r"",
  "OP "."",
  "NAME "rstrip"",
  "OP "("",
  "OP ")"",
  "OP "."",
  "NAME "rstrip"",
  "OP "("",
  "STRING ","",
  "OP ")"",
  "OP "+"",
  "STRING "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "pos"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "r"",
  "OP "+="",
  "STRING ", pos=%r"",
  "OP "%"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "pos"",
  "OP ","",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "return"",
  "NAME "r"",
  "OP "+"",
  "STRING ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "stringify"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "block_plugin"",
  "OP "="",
  "NAME "False"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "STRING "\\\\n"",
  "OP "."",
  "NAME "join"",
  "OP "("",
  "NAME "block"",
  "OP "."",
  "NAME "stringify"",
  "OP "("",
  "NAME "block_plugin"",
  "OP ")"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "for"",
  "NAME "block"",
  "NAME "in"",
  "NAME "self"",
  "OP "."",
  "NAME "blocks"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# Pretend to be a list"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__getattr__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "name"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "if"",
  "NAME "name"",
  "OP "."",
  "NAME "startswith"",
  "OP "("",
  "STRING "__"",
  "OP ")"",
  "NAME "and"",
  "NAME "name"",
  "OP "."",
  "NAME "endswith"",
  "OP "("",
  "STRING "__"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "return"",
  "NAME "super"",
  "OP "("",
  "NAME "Script"",
  "OP ","",
  "NAME "self"",
  "OP ")"",
  "OP "."",
  "NAME "__getattr__"",
  "OP "("",
  "NAME "name"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "return"",
  "NAME "getattr"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "blocks"",
  "OP ","",
  "NAME "name"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__iter__"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "NAME "iter"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "blocks"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__len__"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "NAME "len"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "blocks"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__getitem__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "index"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "blocks"",
  "OP "["",
  "NAME "index"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__setitem__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "index"",
  "OP ","",
  "NAME "value"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "self"",
  "OP "."",
  "NAME "blocks"",
  "OP "["",
  "NAME "index"",
  "OP "]"",
  "OP "="",
  "NAME "value"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__delitem__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "index"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "del"",
  "NAME "self"",
  "OP "."",
  "NAME "blocks"",
  "OP "["",
  "NAME "index"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "class"",
  "NAME "Comment"",
  "OP "("",
  "NAME "object"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "A free-floating comment in :attr:\`Scriptable.scripts\`."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "text"",
  "OP ","",
  "NAME "pos"",
  "OP "="",
  "NAME "None"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "self"",
  "OP "."",
  "NAME "text"",
  "OP "="",
  "NAME "unicode"",
  "OP "("",
  "NAME "text"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "The text of the comment."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "pos"",
  "OP "="",
  "NAME "tuple"",
  "OP "("",
  "NAME "pos"",
  "OP ")"",
  "NAME "if"",
  "NAME "pos"",
  "NAME "else"",
  "NAME "None"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "\`\`(x, y)\`\` position from the top-left of the script area in\\r\\n        pixels.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "copy"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "text"",
  "OP ","",
  "NAME "tuple"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "pos"",
  "OP ")"",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "pos"",
  "NAME "else"",
  "NAME "None"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__repr__"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "r"",
  "OP "="",
  "STRING "%s.%s(%r"",
  "OP "%"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__module__"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__name__"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "text"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "pos"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "r"",
  "OP "+="",
  "STRING ", pos=%r"",
  "OP "%"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "pos"",
  "OP ","",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "return"",
  "NAME "r"",
  "OP "+"",
  "STRING ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "stringify"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "STRING "// "",
  "OP "+"",
  "NAME "self"",
  "OP "."",
  "NAME "text"",
  "OP "."",
  "NAME "replace"",
  "OP "("",
  "STRING "\\\\n"",
  "OP ","",
  "STRING "\\\\n// "",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "_normalize"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "self"",
  "OP "."",
  "NAME "pos"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "pos"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "text"",
  "OP "="",
  "NAME "unicode"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "text"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "#-- Costumes --#"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "class"",
  "NAME "Costume"",
  "OP "("",
  "NAME "object"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "Describes the look of a sprite.\\r\\n\\r\\n    The raw image data is stored in :attr:\`image\`.\\r\\n\\r\\n    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "name"",
  "OP ","",
  "NAME "image"",
  "OP ","",
  "NAME "rotation_center"",
  "OP "="",
  "NAME "None"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "self"",
  "OP "."",
  "NAME "name"",
  "OP "="",
  "NAME "unicode"",
  "OP "("",
  "NAME "name"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "Name used by scripts to refer to this Costume."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "not"",
  "NAME "rotation_center"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "rotation_center"",
  "OP "="",
  "OP "("",
  "NAME "int"",
  "OP "("",
  "NAME "image"",
  "OP "."",
  "NAME "width"",
  "OP "/"",
  "NUMBER "2"",
  "OP ")"",
  "OP ","",
  "NAME "int"",
  "OP "("",
  "NAME "image"",
  "OP "."",
  "NAME "height"",
  "OP "/"",
  "NUMBER "2"",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "self"",
  "OP "."",
  "NAME "rotation_center"",
  "OP "="",
  "NAME "tuple"",
  "OP "("",
  "NAME "rotation_center"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "\`\`(x, y)\`\` position from the top-left corner of the point about\\r\\n        which the image rotates.\\r\\n\\r\\n        Defaults to the center of the image.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "image"",
  "OP "="",
  "NAME "image"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "An :class:\`Image\` instance containing the raw image data."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "copy"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Return a new instance with the same attributes."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "Costume"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "name"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "image"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "rotation_center"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "classmethod"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "load"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "path"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Load costume from image file.\\r\\n\\r\\n        Uses :attr:\`Image.load\`, but will set the Costume's name based on the\\r\\n        image filename.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "OP "("",
  "NAME "folder"",
  "OP ","",
  "NAME "filename"",
  "OP ")"",
  "OP "="",
  "NAME "os"",
  "OP "."",
  "NAME "path"",
  "OP "."",
  "NAME "split"",
  "OP "("",
  "NAME "path"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "OP "("",
  "NAME "name"",
  "OP ","",
  "NAME "extension"",
  "OP ")"",
  "OP "="",
  "NAME "os"",
  "OP "."",
  "NAME "path"",
  "OP "."",
  "NAME "splitext"",
  "OP "("",
  "NAME "filename"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "Costume"",
  "OP "("",
  "NAME "name"",
  "OP ","",
  "NAME "Image"",
  "OP "."",
  "NAME "load"",
  "OP "("",
  "NAME "path"",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "save"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "path"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Save the costume to an image file at the given path.\\r\\n\\r\\n        Uses :attr:\`Image.save\`, but if the path ends in a folder instead of a\\r\\n        file, the filename is based on the costume's :attr:\`name\`.\\r\\n\\r\\n        The image format is guessed from the extension. If path has no\\r\\n        extension, the image's :attr:\`format\` is used.\\r\\n\\r\\n        :returns: Path to the saved file.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "OP "("",
  "NAME "folder"",
  "OP ","",
  "NAME "filename"",
  "OP ")"",
  "OP "="",
  "NAME "os"",
  "OP "."",
  "NAME "path"",
  "OP "."",
  "NAME "split"",
  "OP "("",
  "NAME "path"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "not"",
  "NAME "filename"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "filename"",
  "OP "="",
  "NAME "_clean_filename"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "name"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "path"",
  "OP "="",
  "NAME "os"",
  "OP "."",
  "NAME "path"",
  "OP "."",
  "NAME "join"",
  "OP "("",
  "NAME "folder"",
  "OP ","",
  "NAME "filename"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "image"",
  "OP "."",
  "NAME "save"",
  "OP "("",
  "NAME "path"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "resize"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "size"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Resize :attr:\`image\` in-place."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "image"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "image"",
  "OP "."",
  "NAME "resize"",
  "OP "("",
  "NAME "size"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__repr__"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "STRING "<%s.%s name=%r rotation_center=%d,%d at 0x%X>"",
  "OP "%"",
  "OP "("",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__module__"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__name__"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "name"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "rotation_center"",
  "OP "["",
  "NUMBER "0"",
  "OP "]"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "rotation_center"",
  "OP "["",
  "NUMBER "1"",
  "OP "]"",
  "OP ","",
  "NAME "id"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "NL "\\r"",
  "NL "\\n"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__getattr__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "name"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "if"",
  "NAME "name"",
  "NAME "in"",
  "OP "("",
  "STRING "width"",
  "OP ","",
  "STRING "height"",
  "OP ","",
  "STRING "size"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "return"",
  "NAME "getattr"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "image"",
  "OP ","",
  "NAME "name"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "return"",
  "NAME "super"",
  "OP "("",
  "NAME "Costume"",
  "OP ","",
  "NAME "self"",
  "OP ")"",
  "OP "."",
  "NAME "__getattr__"",
  "OP "("",
  "NAME "name"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "class"",
  "NAME "Image"",
  "OP "("",
  "NAME "object"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "The contents of an image file.\\r\\n\\r\\n    Constructing from raw file contents::\\r\\n\\r\\n        Image(file_contents, \\"JPEG\\")\\r\\n\\r\\n    Constructing from a :class:\`PIL.Image.Image\` instance::\\r\\n\\r\\n        pil_image = PIL.Image.new(\\"RGBA\\", (480, 360))\\r\\n        Image(pil_image)\\r\\n\\r\\n    Loading from file path::\\r\\n\\r\\n        Image.load(\\"path/to/image.jpg\\")\\r\\n\\r\\n    Images are immutable. If you want to modify an image, get a\\r\\n    :class:\`PIL.Image.Image\` instance from :attr:\`pil_image\`, modify that, and\\r\\n    use it to construct a new Image. Modifying images in-place may break\\r\\n    things.\\r\\n\\r\\n    The reason for having multiple constructors is so that kurt can implement\\r\\n    lazy loading of image data -- in many cases, a PIL image will never need to\\r\\n    be created.\\r\\n\\r\\n    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "contents"",
  "OP ","",
  "NAME "format"",
  "OP "="",
  "NAME "None"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "self"",
  "OP "."",
  "NAME "_path"",
  "OP "="",
  "NAME "None"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "_pil_image"",
  "OP "="",
  "NAME "None"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "_contents"",
  "OP "="",
  "NAME "None"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "_format"",
  "OP "="",
  "NAME "None"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "_size"",
  "OP "="",
  "NAME "None"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "contents"",
  "OP ","",
  "NAME "PIL"",
  "OP "."",
  "NAME "Image"",
  "OP "."",
  "NAME "Image"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "self"",
  "OP "."",
  "NAME "_pil_image"",
  "OP "="",
  "NAME "contents"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "self"",
  "OP "."",
  "NAME "_contents"",
  "OP "="",
  "NAME "contents"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "_format"",
  "OP "="",
  "NAME "Image"",
  "OP "."",
  "NAME "image_format"",
  "OP "("",
  "NAME "format"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "def"",
  "NAME "__getstate__"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "if"",
  "NAME "isinstance"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "_pil_image"",
  "OP ","",
  "NAME "PIL"",
  "OP "."",
  "NAME "Image"",
  "OP "."",
  "NAME "Image"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "copy"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "__dict__"",
  "OP "."",
  "NAME "copy"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "copy"",
  "OP "["",
  "STRING "_pil_image"",
  "OP "]"",
  "OP "="",
  "OP "{"",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "data"",
  "OP ":"",
  "NAME "self"",
  "OP "."",
  "NAME "_pil_image"",
  "OP "."",
  "NAME "tobytes"",
  "OP "("",
  "OP ")"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "size"",
  "OP ":"",
  "NAME "self"",
  "OP "."",
  "NAME "_pil_image"",
  "OP "."",
  "NAME "size"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "STRING "mode"",
  "OP ":"",
  "NAME "self"",
  "OP "."",
  "NAME "_pil_image"",
  "OP "."",
  "NAME "mode"",
  "OP "}"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "copy"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "__dict__"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__setstate__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "data"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "self"",
  "OP "."",
  "NAME "__dict__"",
  "OP "."",
  "NAME "update"",
  "OP "("",
  "NAME "data"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "_pil_image"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "self"",
  "OP "."",
  "NAME "_pil_image"",
  "OP "="",
  "NAME "PIL"",
  "OP "."",
  "NAME "Image"",
  "OP "."",
  "NAME "frombytes"",
  "OP "("",
  "OP "**"",
  "NAME "self"",
  "OP "."",
  "NAME "_pil_image"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# Properties"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "OP "@"",
  "NAME "property"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "pil_image"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "A :class:\`PIL.Image.Image\` instance containing the image data."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "not"",
  "NAME "self"",
  "OP "."",
  "NAME "_pil_image"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "_format"",
  "OP "=="",
  "STRING "SVG"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "raise"",
  "NAME "VectorImageError"",
  "OP "("",
  "STRING "can't rasterise vector images"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "self"",
  "OP "."",
  "NAME "_pil_image"",
  "OP "="",
  "NAME "PIL"",
  "OP "."",
  "NAME "Image"",
  "OP "."",
  "NAME "open"",
  "OP "("",
  "NAME "StringIO"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "contents"",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "_pil_image"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "property"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "contents"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "The raw file contents as a string."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "not"",
  "NAME "self"",
  "OP "."",
  "NAME "_contents"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "_path"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "COMMENT "# Read file into memory so we don't run out of file descriptors"",
  "NL "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "f"",
  "OP "="",
  "NAME "open"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "_path"",
  "OP ","",
  "STRING "rb"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "_contents"",
  "OP "="",
  "NAME "f"",
  "OP "."",
  "NAME "read"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "f"",
  "OP "."",
  "NAME "close"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "elif"",
  "NAME "self"",
  "OP "."",
  "NAME "_pil_image"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "COMMENT "# Write PIL image to string"",
  "NL "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "f"",
  "OP "="",
  "NAME "StringIO"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "_pil_image"",
  "OP "."",
  "NAME "save"",
  "OP "("",
  "NAME "f"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "format"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "_contents"",
  "OP "="",
  "NAME "f"",
  "OP "."",
  "NAME "getvalue"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "_contents"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "property"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "format"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "The format of the image file.\\r\\n\\r\\n        An uppercase string corresponding to the\\r\\n        :attr:\`PIL.ImageFile.ImageFile.format\` attribute.  Valid values include\\r\\n        \`\`\\"JPEG\\"\`\` and \`\`\\"PNG\\"\`\`.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "_format"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "_format"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "elif"",
  "NAME "self"",
  "OP "."",
  "NAME "pil_image"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "pil_image"",
  "OP "."",
  "NAME "format"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "OP "@"",
  "NAME "property"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "extension"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "The extension of the image's :attr:\`format\` when written to file.\\r\\n\\r\\n        eg \`\`\\".png\\"\`\`\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "Image"",
  "OP "."",
  "NAME "image_extension"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "format"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "property"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "size"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "\`\`(width, height)\`\` in pixels."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "_size"",
  "NAME "and"",
  "NAME "not"",
  "NAME "self"",
  "OP "."",
  "NAME "_pil_image"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "_size"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "pil_image"",
  "OP "."",
  "NAME "size"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "OP "@"",
  "NAME "property"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "width"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "size"",
  "OP "["",
  "NUMBER "0"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "property"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "height"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "size"",
  "OP "["",
  "NUMBER "1"",
  "OP "]"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# Methods"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "classmethod"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "load"",
  "OP "("",
  "NAME "cls"",
  "OP ","",
  "NAME "path"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Load image from file."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "assert"",
  "NAME "os"",
  "OP "."",
  "NAME "path"",
  "OP "."",
  "NAME "exists"",
  "OP "("",
  "NAME "path"",
  "OP ")"",
  "OP ","",
  "STRING "No such file: %r"",
  "OP "%"",
  "NAME "path"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "OP "("",
  "NAME "folder"",
  "OP ","",
  "NAME "filename"",
  "OP ")"",
  "OP "="",
  "NAME "os"",
  "OP "."",
  "NAME "path"",
  "OP "."",
  "NAME "split"",
  "OP "("",
  "NAME "path"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "OP "("",
  "NAME "name"",
  "OP ","",
  "NAME "extension"",
  "OP ")"",
  "OP "="",
  "NAME "os"",
  "OP "."",
  "NAME "path"",
  "OP "."",
  "NAME "splitext"",
  "OP "("",
  "NAME "filename"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "image"",
  "OP "="",
  "NAME "Image"",
  "OP "("",
  "NAME "None"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "image"",
  "OP "."",
  "NAME "_path"",
  "OP "="",
  "NAME "path"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "image"",
  "OP "."",
  "NAME "_format"",
  "OP "="",
  "NAME "Image"",
  "OP "."",
  "NAME "image_format"",
  "OP "("",
  "NAME "extension"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "image"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "convert"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "OP "*"",
  "NAME "formats"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Return an Image instance with the first matching format.\\r\\n\\r\\n        For each format in \`\`*args\`\`: If the image's :attr:\`format\` attribute\\r\\n        is the same as the format, return self, otherwise try the next format.\\r\\n\\r\\n        If none of the formats match, return a new Image instance with the\\r\\n        last format.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "for"",
  "NAME "format"",
  "NAME "in"",
  "NAME "formats"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "format"",
  "OP "="",
  "NAME "Image"",
  "OP "."",
  "NAME "image_format"",
  "OP "("",
  "NAME "format"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "format"",
  "OP "=="",
  "NAME "format"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "return"",
  "NAME "self"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "_convert"",
  "OP "("",
  "NAME "format"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "def"",
  "NAME "_convert"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "format"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Return a new Image instance with the given format.\\r\\n\\r\\n        Returns self if the format is already the same.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "format"",
  "OP "=="",
  "NAME "format"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "return"",
  "NAME "self"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "image"",
  "OP "="",
  "NAME "Image"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "pil_image"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "image"",
  "OP "."",
  "NAME "_format"",
  "OP "="",
  "NAME "format"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "image"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "def"",
  "NAME "save"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "path"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Save image to file path.\\r\\n\\r\\n        The image format is guessed from the extension. If path has no\\r\\n        extension, the image's :attr:\`format\` is used.\\r\\n\\r\\n        :returns: Path to the saved file.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "OP "("",
  "NAME "folder"",
  "OP ","",
  "NAME "filename"",
  "OP ")"",
  "OP "="",
  "NAME "os"",
  "OP "."",
  "NAME "path"",
  "OP "."",
  "NAME "split"",
  "OP "("",
  "NAME "path"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "OP "("",
  "NAME "name"",
  "OP ","",
  "NAME "extension"",
  "OP ")"",
  "OP "="",
  "NAME "os"",
  "OP "."",
  "NAME "path"",
  "OP "."",
  "NAME "splitext"",
  "OP "("",
  "NAME "filename"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "not"",
  "NAME "name"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "raise"",
  "NAME "ValueError"",
  "OP ","",
  "STRING "name is required"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "if"",
  "NAME "extension"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "format"",
  "OP "="",
  "NAME "Image"",
  "OP "."",
  "NAME "image_format"",
  "OP "("",
  "NAME "extension"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "format"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "format"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "filename"",
  "OP "="",
  "NAME "name"",
  "OP "+"",
  "NAME "self"",
  "OP "."",
  "NAME "extension"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "path"",
  "OP "="",
  "NAME "os"",
  "OP "."",
  "NAME "path"",
  "OP "."",
  "NAME "join"",
  "OP "("",
  "NAME "folder"",
  "OP ","",
  "NAME "filename"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "image"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "convert"",
  "OP "("",
  "NAME "format"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "image"",
  "OP "."",
  "NAME "_contents"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "f"",
  "OP "="",
  "NAME "open"",
  "OP "("",
  "NAME "path"",
  "OP ","",
  "STRING "wb"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "f"",
  "OP "."",
  "NAME "write"",
  "OP "("",
  "NAME "image"",
  "OP "."",
  "NAME "_contents"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "f"",
  "OP "."",
  "NAME "close"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "image"",
  "OP "."",
  "NAME "pil_image"",
  "OP "."",
  "NAME "save"",
  "OP "("",
  "NAME "path"",
  "OP ","",
  "NAME "format"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "return"",
  "NAME "path"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "classmethod"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "new"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "size"",
  "OP ","",
  "NAME "fill"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Return a new Image instance filled with a color."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "Image"",
  "OP "("",
  "NAME "PIL"",
  "OP "."",
  "NAME "Image"",
  "OP "."",
  "NAME "new"",
  "OP "("",
  "STRING "RGB"",
  "OP ","",
  "NAME "size"",
  "OP ","",
  "NAME "fill"",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "resize"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "size"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Return a new Image instance with the given size."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "Image"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "pil_image"",
  "OP "."",
  "NAME "resize"",
  "OP "("",
  "NAME "size"",
  "OP ","",
  "NAME "PIL"",
  "OP "."",
  "NAME "Image"",
  "OP "."",
  "NAME "ANTIALIAS"",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "paste"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "other"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Return a new Image with the given image pasted on top.\\r\\n\\r\\n        This image will show through transparent areas of the given image.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "r"",
  "OP ","",
  "NAME "g"",
  "OP ","",
  "NAME "b"",
  "OP ","",
  "NAME "alpha"",
  "OP "="",
  "NAME "other"",
  "OP "."",
  "NAME "pil_image"",
  "OP "."",
  "NAME "split"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "pil_image"",
  "OP "="",
  "NAME "self"",
  "OP "."",
  "NAME "pil_image"",
  "OP "."",
  "NAME "copy"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "pil_image"",
  "OP "."",
  "NAME "paste"",
  "OP "("",
  "NAME "other"",
  "OP "."",
  "NAME "pil_image"",
  "OP ","",
  "NAME "mask"",
  "OP "="",
  "NAME "alpha"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "kurt"",
  "OP "."",
  "NAME "Image"",
  "OP "("",
  "NAME "pil_image"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# Static methods"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "staticmethod"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "image_format"",
  "OP "("",
  "NAME "format_or_extension"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "if"",
  "NAME "format_or_extension"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "format"",
  "OP "="",
  "NAME "format_or_extension"",
  "OP "."",
  "NAME "lstrip"",
  "OP "("",
  "STRING "."",
  "OP ")"",
  "OP "."",
  "NAME "upper"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "format"",
  "OP "=="",
  "STRING "JPG"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "format"",
  "OP "="",
  "STRING "JPEG"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "return"",
  "NAME "format"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "OP "@"",
  "NAME "staticmethod"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "image_extension"",
  "OP "("",
  "NAME "format_or_extension"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "if"",
  "NAME "format_or_extension"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "extension"",
  "OP "="",
  "NAME "format_or_extension"",
  "OP "."",
  "NAME "lstrip"",
  "OP "("",
  "STRING "."",
  "OP ")"",
  "OP "."",
  "NAME "lower"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "extension"",
  "OP "=="",
  "STRING "jpeg"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "extension"",
  "OP "="",
  "STRING "jpg"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "return"",
  "STRING "."",
  "OP "+"",
  "NAME "extension"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "#-- Sounds --#"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "DEDENT """,
  "NAME "class"",
  "NAME "Sound"",
  "OP "("",
  "NAME "object"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "A sound a :class:\`Scriptable\` can play.\\r\\n\\r\\n    The raw sound data is stored in :attr:\`waveform\`.\\r\\n\\r\\n    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "name"",
  "OP ","",
  "NAME "waveform"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "self"",
  "OP "."",
  "NAME "name"",
  "OP "="",
  "NAME "name"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "Name used by scripts to refer to this Sound."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "waveform"",
  "OP "="",
  "NAME "waveform"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "STRING "A :class:\`Waveform\` instance containing the raw sound data."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "copy"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Return a new instance with the same attributes."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "Sound"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "name"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "waveform"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "classmethod"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "load"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "path"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Load sound from wave file.\\r\\n\\r\\n        Uses :attr:\`Waveform.load\`, but will set the Waveform's name based on\\r\\n        the sound filename.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "OP "("",
  "NAME "folder"",
  "OP ","",
  "NAME "filename"",
  "OP ")"",
  "OP "="",
  "NAME "os"",
  "OP "."",
  "NAME "path"",
  "OP "."",
  "NAME "split"",
  "OP "("",
  "NAME "path"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "OP "("",
  "NAME "name"",
  "OP ","",
  "NAME "extension"",
  "OP ")"",
  "OP "="",
  "NAME "os"",
  "OP "."",
  "NAME "path"",
  "OP "."",
  "NAME "splitext"",
  "OP "("",
  "NAME "filename"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "Sound"",
  "OP "("",
  "NAME "name"",
  "OP ","",
  "NAME "Waveform"",
  "OP "."",
  "NAME "load"",
  "OP "("",
  "NAME "path"",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "save"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "path"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Save the sound to a wave file at the given path.\\r\\n\\r\\n        Uses :attr:\`Waveform.save\`, but if the path ends in a folder instead of\\r\\n        a file, the filename is based on the project's :attr:\`name\`.\\r\\n\\r\\n        :returns: Path to the saved file.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "OP "("",
  "NAME "folder"",
  "OP ","",
  "NAME "filename"",
  "OP ")"",
  "OP "="",
  "NAME "os"",
  "OP "."",
  "NAME "path"",
  "OP "."",
  "NAME "split"",
  "OP "("",
  "NAME "path"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "not"",
  "NAME "filename"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "filename"",
  "OP "="",
  "NAME "_clean_filename"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "name"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "path"",
  "OP "="",
  "NAME "os"",
  "OP "."",
  "NAME "path"",
  "OP "."",
  "NAME "join"",
  "OP "("",
  "NAME "folder"",
  "OP ","",
  "NAME "filename"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "waveform"",
  "OP "."",
  "NAME "save"",
  "OP "("",
  "NAME "path"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "__repr__"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "return"",
  "STRING "<%s.%s name=%r at 0x%X>"",
  "OP "%"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__module__"",
  "OP ","",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "__class__"",
  "OP "."",
  "NAME "__name__"",
  "OP ","",
  "NAME "self"",
  "OP "."",
  "NAME "name"",
  "OP ","",
  "NAME "id"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "class"",
  "NAME "Waveform"",
  "OP "("",
  "NAME "object"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "    "",
  "STRING "The contents of a wave file. Only WAV format files are supported.\\r\\n\\r\\n    Constructing from raw file contents::\\r\\n\\r\\n        Sound(file_contents)\\r\\n\\r\\n    Loading from file path::\\r\\n\\r\\n        Sound.load(\\"path/to/sound.wav\\")\\r\\n\\r\\n    Waveforms are immutable.\\r\\n\\r\\n    "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "extension"",
  "OP "="",
  "STRING ".wav"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "__init__"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "contents"",
  "OP ","",
  "NAME "rate"",
  "OP "="",
  "NAME "None"",
  "OP ","",
  "NAME "sample_count"",
  "OP "="",
  "NAME "None"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "NAME "self"",
  "OP "."",
  "NAME "_path"",
  "OP "="",
  "NAME "None"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "_contents"",
  "OP "="",
  "NAME "contents"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "_rate"",
  "OP "="",
  "NAME "rate"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "_sample_count"",
  "OP "="",
  "NAME "sample_count"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# Properties"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "property"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "contents"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "The raw file contents as a string."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "not"",
  "NAME "self"",
  "OP "."",
  "NAME "_contents"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "_path"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "COMMENT "# Read file into memory so we don't run out of file descriptors"",
  "NL "\\r"",
  "NL "\\n"",
  "INDENT "                "",
  "NAME "f"",
  "OP "="",
  "NAME "open"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "_path"",
  "OP ","",
  "STRING "rb"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "self"",
  "OP "."",
  "NAME "_contents"",
  "OP "="",
  "NAME "f"",
  "OP "."",
  "NAME "read"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "f"",
  "OP "."",
  "NAME "close"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "_contents"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "OP "@"",
  "NAME "property"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "_wave"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Return a wave.Wave_read instance from the \`\`wave\`\` module."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "try"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "return"",
  "NAME "wave"",
  "OP "."",
  "NAME "open"",
  "OP "("",
  "NAME "StringIO"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "contents"",
  "OP ")"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "except"",
  "NAME "wave"",
  "OP "."",
  "NAME "Error"",
  "OP ","",
  "NAME "err"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "err"",
  "OP "."",
  "NAME "message"",
  "OP "+="",
  "STRING "\\\\nInvalid wave file: %s"",
  "OP "%"",
  "NAME "self"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "err"",
  "OP "."",
  "NAME "args"",
  "OP "="",
  "OP "("",
  "NAME "err"",
  "OP "."",
  "NAME "message"",
  "OP ","",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "raise"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "OP "@"",
  "NAME "property"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "rate"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "The sampling rate of the sound."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "_rate"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "_rate"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "_wave"",
  "OP "."",
  "NAME "getframerate"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "OP "@"",
  "NAME "property"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "sample_count"",
  "OP "("",
  "NAME "self"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "The number of samples in the sound."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "self"",
  "OP "."",
  "NAME "_sample_count"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "_sample_count"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "else"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "return"",
  "NAME "self"",
  "OP "."",
  "NAME "_wave"",
  "OP "."",
  "NAME "getnframes"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "# Methods"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "OP "@"",
  "NAME "classmethod"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "def"",
  "NAME "load"",
  "OP "("",
  "NAME "cls"",
  "OP ","",
  "NAME "path"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Load Waveform from file."",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "assert"",
  "NAME "os"",
  "OP "."",
  "NAME "path"",
  "OP "."",
  "NAME "exists"",
  "OP "("",
  "NAME "path"",
  "OP ")"",
  "OP ","",
  "STRING "No such file: %r"",
  "OP "%"",
  "NAME "path"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "OP "("",
  "NAME "folder"",
  "OP ","",
  "NAME "filename"",
  "OP ")"",
  "OP "="",
  "NAME "os"",
  "OP "."",
  "NAME "path"",
  "OP "."",
  "NAME "split"",
  "OP "("",
  "NAME "path"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "OP "("",
  "NAME "name"",
  "OP ","",
  "NAME "extension"",
  "OP ")"",
  "OP "="",
  "NAME "os"",
  "OP "."",
  "NAME "path"",
  "OP "."",
  "NAME "splitext"",
  "OP "("",
  "NAME "filename"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "wave"",
  "OP "="",
  "NAME "Waveform"",
  "OP "("",
  "NAME "None"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "wave"",
  "OP "."",
  "NAME "_path"",
  "OP "="",
  "NAME "path"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "wave"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "def"",
  "NAME "save"",
  "OP "("",
  "NAME "self"",
  "OP ","",
  "NAME "path"",
  "OP ")"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "        "",
  "STRING "Save waveform to file path as a WAV file.\\r\\n\\r\\n        :returns: Path to the saved file.\\r\\n\\r\\n        "",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "OP "("",
  "NAME "folder"",
  "OP ","",
  "NAME "filename"",
  "OP ")"",
  "OP "="",
  "NAME "os"",
  "OP "."",
  "NAME "path"",
  "OP "."",
  "NAME "split"",
  "OP "("",
  "NAME "path"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "OP "("",
  "NAME "name"",
  "OP ","",
  "NAME "extension"",
  "OP ")"",
  "OP "="",
  "NAME "os"",
  "OP "."",
  "NAME "path"",
  "OP "."",
  "NAME "splitext"",
  "OP "("",
  "NAME "filename"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "if"",
  "NAME "not"",
  "NAME "name"",
  "OP ":"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "INDENT "            "",
  "NAME "raise"",
  "NAME "ValueError"",
  "OP ","",
  "STRING "name is required"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "NAME "path"",
  "OP "="",
  "NAME "os"",
  "OP "."",
  "NAME "path"",
  "OP "."",
  "NAME "join"",
  "OP "("",
  "NAME "folder"",
  "OP ","",
  "NAME "name"",
  "OP "+"",
  "NAME "self"",
  "OP "."",
  "NAME "extension"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "f"",
  "OP "="",
  "NAME "open"",
  "OP "("",
  "NAME "path"",
  "OP ","",
  "STRING "wb"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "f"",
  "OP "."",
  "NAME "write"",
  "OP "("",
  "NAME "self"",
  "OP "."",
  "NAME "contents"",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "f"",
  "OP "."",
  "NAME "close"",
  "OP "("",
  "OP ")"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "return"",
  "NAME "path"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "COMMENT "#-- Import submodules --#"",
  "NL "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "DEDENT """,
  "DEDENT """,
  "NAME "import"",
  "NAME "kurt"",
  "OP "."",
  "NAME "plugin"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "import"",
  "NAME "kurt"",
  "OP "."",
  "NAME "text"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "NAME "import"",
  "NAME "kurt"",
  "OP "."",
  "NAME "scratch20"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NAME "import"",
  "NAME "kurt"",
  "OP "."",
  "NAME "scratch14"",
  "NEWLINE "\\r"",
  "NL "\\n"",
  "NL "\\r"",
  "NL "\\n"",
  "ENDMARKER """,
]
`;
